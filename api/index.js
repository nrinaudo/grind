Index.PACKAGES = {"kantan.xpath.literals" : [{"name" : "kantan.xpath.literals.ToXPathLiteral", "trait" : "kantan\/xpath\/literals\/ToXPathLiteral.html", "kind" : "trait", "members_trait" : [{"label" : "toXPathLiteral", "tail" : "(sc: StringContext): XPathLiteral", "member" : "kantan.xpath.literals.ToXPathLiteral.toXPathLiteral", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#toXPathLiteral(sc:StringContext):kantan.xpath.literals.XPathLiteral", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/literals\/ToXPathLiteral.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.xpath.literals.XPathLiteral", "shortDescription" : "", "object" : "kantan\/xpath\/literals\/XPathLiteral$.html", "members_class" : [{"label" : "xp", "tail" : "(args: Any*): XPathExpression", "member" : "kantan.xpath.literals.XPathLiteral.xp", "link" : "kantan\/xpath\/literals\/XPathLiteral.html#xp(args:Any*):kantan.xpath.XPathExpression", "kind" : "macro def"}, {"member" : "kantan.xpath.literals.XPathLiteral#<init>", "error" : "unsupported entity"}, {"label" : "sc", "tail" : ": StringContext", "member" : "kantan.xpath.literals.XPathLiteral.sc", "link" : "kantan\/xpath\/literals\/XPathLiteral.html#sc:StringContext", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "kantan\/xpath\/literals\/XPathLiteral.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "kantan\/xpath\/literals\/XPathLiteral.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/literals\/XPathLiteral.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/literals\/XPathLiteral.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "kantan\/xpath\/literals\/XPathLiteral.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "kantan\/xpath\/literals\/XPathLiteral.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "kantan\/xpath\/literals\/XPathLiteral.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "xpImpl", "tail" : "(c: Context)(args: scala.reflect.macros.blackbox.Context.Expr[Any]*): scala.reflect.macros.blackbox.Context.Expr[XPathExpression]", "member" : "kantan.xpath.literals.XPathLiteral.xpImpl", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#xpImpl(c:scala.reflect.macros.blackbox.Context)(args:c.Expr[Any]*):c.Expr[kantan.xpath.XPathExpression]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/literals\/XPathLiteral$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/xpath\/literals\/XPathLiteral.html", "kind" : "class"}, {"name" : "kantan.xpath.literals.XPathLiteralMacro", "trait" : "kantan\/xpath\/literals\/XPathLiteralMacro.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "xpImpl", "tail" : "(c: Context)(args: scala.reflect.macros.blackbox.Context.Expr[Any]*): scala.reflect.macros.blackbox.Context.Expr[XPathExpression]", "member" : "kantan.xpath.literals.XPathLiteralMacro.xpImpl", "link" : "kantan\/xpath\/literals\/XPathLiteralMacro.html#xpImpl(c:scala.reflect.macros.blackbox.Context)(args:c.Expr[Any]*):c.Expr[kantan.xpath.XPathExpression]", "kind" : "abstract def"}], "shortDescription" : ""}], "kantan.xpath.ops" : [{"name" : "kantan.xpath.ops.AllOps", "trait" : "kantan\/xpath\/ops\/AllOps.html", "kind" : "trait", "members_trait" : [{"label" : "toXmlSourceOps", "tail" : "(a: A)(arg0: XmlSource[A]): XmlSourceOps[A]", "member" : "kantan.xpath.ops.ToXmlSourceOps.toXmlSourceOps", "link" : "kantan\/xpath\/ops\/AllOps.html#toXmlSourceOps[A](a:A)(implicitevidence$4:kantan.xpath.XmlSource[A]):kantan.xpath.ops.XmlSourceOps[A]", "kind" : "implicit def"}, {"label" : "toXPathExpressionOps", "tail" : "(expr: Query[DecodeResult[A]]): ExpressionOps[A]", "member" : "kantan.xpath.ops.ToExpressionOps.toXPathExpressionOps", "link" : "kantan\/xpath\/ops\/AllOps.html#toXPathExpressionOps[A](expr:kantan.xpath.Query[kantan.xpath.DecodeResult[A]]):kantan.xpath.ops.ExpressionOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ops\/AllOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ops\/AllOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ops\/AllOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ops\/AllOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ops\/AllOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ops\/AllOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ops\/AllOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/AllOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/AllOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/AllOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ops\/AllOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ops\/AllOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/ops\/AllOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ops\/AllOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ops\/AllOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ops\/AllOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ops\/AllOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ops\/AllOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ops\/AllOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.xpath.ops.expression", "shortDescription" : "", "object" : "kantan\/xpath\/ops\/expression$.html", "members_object" : [{"label" : "toXPathExpressionOps", "tail" : "(expr: Query[DecodeResult[A]]): ExpressionOps[A]", "member" : "kantan.xpath.ops.ToExpressionOps.toXPathExpressionOps", "link" : "kantan\/xpath\/ops\/expression$.html#toXPathExpressionOps[A](expr:kantan.xpath.Query[kantan.xpath.DecodeResult[A]]):kantan.xpath.ops.ExpressionOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ops\/expression$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ops\/expression$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ops\/expression$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ops\/expression$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ops\/expression$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ops\/expression$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ops\/expression$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/expression$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/expression$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/expression$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ops\/expression$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ops\/expression$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/ops\/expression$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ops\/expression$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ops\/expression$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ops\/expression$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ops\/expression$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ops\/expression$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ops\/expression$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.xpath.ops.ExpressionOps", "shortDescription" : "", "members_class" : [{"label" : "mapResult", "tail" : "(f: (A) => B): Query[DecodeResult[B]]", "member" : "kantan.xpath.ops.ExpressionOps.mapResult", "link" : "kantan\/xpath\/ops\/ExpressionOps.html#mapResult[B](f:A=>B):kantan.xpath.Query[kantan.xpath.DecodeResult[B]]", "kind" : "def"}, {"member" : "kantan.xpath.ops.ExpressionOps#<init>", "error" : "unsupported entity"}, {"label" : "expr", "tail" : ": Query[DecodeResult[A]]", "member" : "kantan.xpath.ops.ExpressionOps.expr", "link" : "kantan\/xpath\/ops\/ExpressionOps.html#expr:kantan.xpath.Query[kantan.xpath.DecodeResult[A]]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "kantan\/xpath\/ops\/ExpressionOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "kantan\/xpath\/ops\/ExpressionOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ops\/ExpressionOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ops\/ExpressionOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "kantan\/xpath\/ops\/ExpressionOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "kantan\/xpath\/ops\/ExpressionOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "kantan\/xpath\/ops\/ExpressionOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "kantan\/xpath\/ops\/ExpressionOps.html", "kind" : "class"}, {"name" : "kantan.xpath.ops.ToExpressionOps", "trait" : "kantan\/xpath\/ops\/ToExpressionOps.html", "kind" : "trait", "members_trait" : [{"label" : "toXPathExpressionOps", "tail" : "(expr: Query[DecodeResult[A]]): ExpressionOps[A]", "member" : "kantan.xpath.ops.ToExpressionOps.toXPathExpressionOps", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#toXPathExpressionOps[A](expr:kantan.xpath.Query[kantan.xpath.DecodeResult[A]]):kantan.xpath.ops.ExpressionOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ops\/ToExpressionOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.xpath.ops.ToXmlSourceOps", "trait" : "kantan\/xpath\/ops\/ToXmlSourceOps.html", "kind" : "trait", "members_trait" : [{"label" : "toXmlSourceOps", "tail" : "(a: A)(arg0: XmlSource[A]): XmlSourceOps[A]", "member" : "kantan.xpath.ops.ToXmlSourceOps.toXmlSourceOps", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#toXmlSourceOps[A](a:A)(implicitevidence$4:kantan.xpath.XmlSource[A]):kantan.xpath.ops.XmlSourceOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ops\/ToXmlSourceOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.xpath.ops.xmlSource", "shortDescription" : "", "object" : "kantan\/xpath\/ops\/xmlSource$.html", "members_object" : [{"label" : "toXmlSourceOps", "tail" : "(a: A)(arg0: XmlSource[A]): XmlSourceOps[A]", "member" : "kantan.xpath.ops.ToXmlSourceOps.toXmlSourceOps", "link" : "kantan\/xpath\/ops\/xmlSource$.html#toXmlSourceOps[A](a:A)(implicitevidence$4:kantan.xpath.XmlSource[A]):kantan.xpath.ops.XmlSourceOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ops\/xmlSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ops\/xmlSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ops\/xmlSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ops\/xmlSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ops\/xmlSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ops\/xmlSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ops\/xmlSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/xmlSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/xmlSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/xmlSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ops\/xmlSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ops\/xmlSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/ops\/xmlSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ops\/xmlSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ops\/xmlSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ops\/xmlSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ops\/xmlSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ops\/xmlSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ops\/xmlSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.xpath.ops.XmlSourceOps", "shortDescription" : "Provides syntax for all types that have an implicit instance of XmlSource in scope.", "members_class" : [{"label" : "evalXPath", "tail" : "(expr: Query[DecodeResult[B]]): ReadResult[B]", "member" : "kantan.xpath.ops.XmlSourceOps.evalXPath", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#evalXPath[B](expr:kantan.xpath.Query[kantan.xpath.DecodeResult[B]]):kantan.xpath.ReadResult[B]", "kind" : "def"}, {"label" : "unsafeEvalXPath", "tail" : "(expr: Query[DecodeResult[B]]): B", "member" : "kantan.xpath.ops.XmlSourceOps.unsafeEvalXPath", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#unsafeEvalXPath[B](expr:kantan.xpath.Query[kantan.xpath.DecodeResult[B]]):B", "kind" : "def"}, {"label" : "evalXPath", "tail" : "(expr: XPathExpression)(arg0: Compiler[B]): XPathResult[B]", "member" : "kantan.xpath.ops.XmlSourceOps.evalXPath", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#evalXPath[B](expr:kantan.xpath.XPathExpression)(implicitevidence$3:kantan.xpath.Compiler[B]):kantan.xpath.XPathResult[B]", "kind" : "def"}, {"label" : "unsafeEvalXPath", "tail" : "(expr: XPathExpression)(arg0: Compiler[B]): B", "member" : "kantan.xpath.ops.XmlSourceOps.unsafeEvalXPath", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#unsafeEvalXPath[B](expr:kantan.xpath.XPathExpression)(implicitevidence$2:kantan.xpath.Compiler[B]):B", "kind" : "def"}, {"label" : "asUnsafeNode", "tail" : "(): Node", "member" : "kantan.xpath.ops.XmlSourceOps.asUnsafeNode", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#asUnsafeNode:kantan.xpath.Node", "kind" : "def"}, {"label" : "asNode", "tail" : "(): ParseResult[Node]", "member" : "kantan.xpath.ops.XmlSourceOps.asNode", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#asNode:kantan.xpath.ParseResult[kantan.xpath.Node]", "kind" : "def"}, {"member" : "kantan.xpath.ops.XmlSourceOps#<init>", "error" : "unsupported entity"}, {"label" : "a", "tail" : ": A", "member" : "kantan.xpath.ops.XmlSourceOps.a", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#a:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ops\/XmlSourceOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/xpath\/ops\/XmlSourceOps.html", "kind" : "class"}], "kantan" : [], "kantan.xpath.laws" : [], "kantan.xpath.nekohtml" : [{"name" : "kantan.xpath.nekohtml.NekoParser", "shortDescription" : "", "members_class" : [{"label" : "parse", "tail" : "(source: InputSource): ParseResult[Node]", "member" : "kantan.xpath.nekohtml.NekoParser.parse", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#parse(source:kantan.xpath.InputSource):kantan.xpath.ParseResult[kantan.xpath.Node]", "kind" : "def"}, {"member" : "kantan.xpath.nekohtml.NekoParser#<init>", "error" : "unsupported entity"}, {"label" : "conf", "tail" : ": HTMLConfiguration", "member" : "kantan.xpath.nekohtml.NekoParser.conf", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#conf:org.cyberneko.html.HTMLConfiguration", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/nekohtml\/NekoParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/xpath\/nekohtml\/NekoParser.html", "kind" : "class"}], "libra" : [], "kantan.xpath" : [{"name" : "kantan.xpath.codecs", "shortDescription" : "", "object" : "kantan\/xpath\/codecs$.html", "members_object" : [{"label" : "eitherNodeDecoder", "tail" : "(arg0: NodeDecoder[A], arg1: NodeDecoder[B]): NodeDecoder[Either[A, B]]", "member" : "kantan.xpath.NodeDecoderInstances.eitherNodeDecoder", "link" : "kantan\/xpath\/codecs$.html#eitherNodeDecoder[A,B](implicitevidence$3:kantan.xpath.NodeDecoder[A],implicitevidence$4:kantan.xpath.NodeDecoder[B]):kantan.xpath.NodeDecoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "optionNodeDecoder", "tail" : "(arg0: NodeDecoder[A]): NodeDecoder[Option[A]]", "member" : "kantan.xpath.NodeDecoderInstances.optionNodeDecoder", "link" : "kantan\/xpath\/codecs$.html#optionNodeDecoder[A](implicitevidence$2:kantan.xpath.NodeDecoder[A]):kantan.xpath.NodeDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "fromString", "tail" : "(arg0: StringDecoder[A]): NodeDecoder[A]", "member" : "kantan.xpath.NodeDecoderInstances.fromString", "link" : "kantan\/xpath\/codecs$.html#fromString[A](implicitevidence$1:kantan.codecs.strings.StringDecoder[A]):kantan.xpath.NodeDecoder[A]", "kind" : "implicit def"}, {"label" : "attr", "tail" : ": NodeDecoder[Attr]", "member" : "kantan.xpath.NodeDecoderInstances.attr", "link" : "kantan\/xpath\/codecs$.html#attr:kantan.xpath.NodeDecoder[kantan.xpath.Attr]", "kind" : "implicit val"}, {"label" : "element", "tail" : ": NodeDecoder[Element]", "member" : "kantan.xpath.NodeDecoderInstances.element", "link" : "kantan\/xpath\/codecs$.html#element:kantan.xpath.NodeDecoder[kantan.xpath.Element]", "kind" : "implicit val"}, {"label" : "node", "tail" : ": NodeDecoder[Node]", "member" : "kantan.xpath.NodeDecoderInstances.node", "link" : "kantan\/xpath\/codecs$.html#node:kantan.xpath.NodeDecoder[kantan.xpath.Node]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/codecs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/codecs$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/codecs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/codecs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/codecs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/codecs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/codecs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/codecs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/codecs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/codecs$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/codecs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/codecs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/codecs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/codecs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/codecs$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/codecs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/codecs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/codecs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/codecs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.xpath.CompileError", "shortDescription" : "Describes a XPath expression compilation error.", "object" : "kantan\/xpath\/CompileError$.html", "members_object" : [{"label" : "apply", "tail" : "(msg: String): CompileError", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/xpath\/CompileError$.html#apply(msg:String):T", "kind" : "def"}, {"label" : "apply", "tail" : "(cause: Throwable): CompileError", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/xpath\/CompileError$.html#apply(cause:Throwable):T", "kind" : "def"}, {"label" : "apply", "tail" : "(msg: String, cause: Throwable): CompileError", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/xpath\/CompileError$.html#apply(msg:String,cause:Throwable):T", "kind" : "def"}, {"label" : "safe", "tail" : "(a: => A): Either[CompileError, A]", "member" : "kantan.codecs.error.ErrorCompanion.safe", "link" : "kantan\/xpath\/CompileError$.html#safe[A](a:=>A):Either[T,A]", "kind" : "def"}, {"label" : "isError", "tail" : ": IsError[CompileError]", "member" : "kantan.codecs.error.ErrorCompanion.isError", "link" : "kantan\/xpath\/CompileError$.html#isError:kantan.codecs.error.IsError[T]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/CompileError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/CompileError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/CompileError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/CompileError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/CompileError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/CompileError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/CompileError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/CompileError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/CompileError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/CompileError$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/CompileError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/CompileError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/CompileError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/CompileError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/CompileError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/CompileError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/CompileError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/CompileError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/CompileError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "kantan.xpath.CompileError#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "kantan.xpath.CompileError.message", "link" : "kantan\/xpath\/CompileError.html#message:String", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/xpath\/CompileError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/CompileError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/xpath\/CompileError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/xpath\/CompileError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/xpath\/CompileError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/xpath\/CompileError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/xpath\/CompileError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/CompileError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/CompileError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/CompileError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/xpath\/CompileError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/xpath\/CompileError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/xpath\/CompileError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/xpath\/CompileError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/CompileError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/CompileError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/CompileError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/CompileError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/CompileError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/CompileError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/CompileError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/CompileError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/CompileError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/CompileError.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/CompileError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/CompileError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/CompileError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/CompileError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/CompileError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/CompileError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/xpath\/CompileError.html", "kind" : "case class"}, {"name" : "kantan.xpath.Compiler", "object" : "kantan\/xpath\/Compiler$.html", "members_object" : [{"label" : "xpathN", "tail" : "(arg0: NodeDecoder[A], f: Factory[A, F[A]]): Compiler[F[A]]", "member" : "kantan.xpath.Compiler.xpathN", "link" : "kantan\/xpath\/Compiler$.html#xpathN[F[_],A](implicitevidence$2:kantan.xpath.NodeDecoder[A],implicitf:kantan.codecs.collection.Factory[A,F[A]]):kantan.xpath.Compiler[F[A]]", "kind" : "implicit def"}, {"label" : "xpath1", "tail" : "(arg0: NodeDecoder[A]): Compiler[Id[A]]", "member" : "kantan.xpath.Compiler.xpath1", "link" : "kantan\/xpath\/Compiler$.html#xpath1[A](implicitevidence$1:kantan.xpath.NodeDecoder[A]):kantan.xpath.Compiler[kantan.xpath.Compiler.Id[A]]", "kind" : "implicit def"}, {"label" : "Id", "tail" : "", "member" : "kantan.xpath.Compiler.Id", "link" : "kantan\/xpath\/Compiler$.html#Id[A]=A", "kind" : "type"}, {"label" : "apply", "tail" : "(ev: Compiler[A]): Compiler[A]", "member" : "kantan.xpath.Compiler.apply", "link" : "kantan\/xpath\/Compiler$.html#apply[A](implicitev:kantan.xpath.Compiler[A]):kantan.xpath.Compiler[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/Compiler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/Compiler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/Compiler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/Compiler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/Compiler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/Compiler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/Compiler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Compiler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Compiler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Compiler$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/Compiler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/Compiler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/Compiler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/Compiler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/Compiler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/Compiler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/Compiler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/Compiler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/Compiler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/xpath\/Compiler.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/Compiler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/Compiler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/Compiler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/Compiler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/Compiler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/Compiler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/Compiler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Compiler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Compiler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Compiler.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/Compiler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/Compiler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/Compiler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/Compiler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/Compiler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/Compiler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/Compiler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/Compiler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/Compiler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compile", "tail" : "(expr: XPathExpression): Query[DecodeResult[A]]", "member" : "kantan.xpath.Compiler.compile", "link" : "kantan\/xpath\/Compiler.html#compile(expr:kantan.xpath.XPathExpression):kantan.xpath.Query[kantan.xpath.DecodeResult[A]]", "kind" : "abstract def"}], "shortDescription" : "Compiles XPath expressions."}, {"name" : "kantan.xpath.CompileResult", "shortDescription" : "", "object" : "kantan\/xpath\/CompileResult$.html", "members_object" : [{"label" : "fromThrowable", "tail" : "(t: Throwable): CompileError", "member" : "kantan.codecs.ResultCompanion.WithError.fromThrowable", "link" : "kantan\/xpath\/CompileResult$.html#fromThrowable(t:Throwable):F", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Either[CompileError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/xpath\/CompileResult$.html#fromTry[S](t:scala.util.Try[S]):Either[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: => S): Either[CompileError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/xpath\/CompileResult$.html#apply[S](s:=>S):Either[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: CompileError): Either[CompileError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/xpath\/CompileResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[CompileError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/xpath\/CompileResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[CompileError, S]])(bf: BuildFrom[M[Either[CompileError, S]], S, M[S]]): Either[CompileError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/xpath\/CompileResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/CompileResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/CompileResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/CompileResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/CompileResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/CompileResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/CompileResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/CompileResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/CompileResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/CompileResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/CompileResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/CompileResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/CompileResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/CompileResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/CompileResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/CompileResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/CompileResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/CompileResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/CompileResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/CompileResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/xpath\/package$$CompileResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/xpath\/package$$CompileResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/xpath\/package$$CompileResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/xpath\/package$$CompileResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/xpath\/package$$CompileResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/xpath\/package$$CompileResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/xpath\/package$$CompileResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/xpath\/package$$CompileResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/xpath\/package$$CompileResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/xpath\/package$$CompileResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/xpath\/package$$CompileResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/xpath\/package$$CompileResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/xpath\/package$$CompileResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/xpath\/package$$CompileResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/xpath\/package$$CompileResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/xpath\/package$$CompileResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/xpath\/package$$CompileResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/xpath\/package$$CompileResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/xpath\/package$$CompileResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/package$$CompileResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/xpath\/package$$CompileResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/xpath\/package$$CompileResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/xpath\/package$$CompileResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/package$$CompileResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/package$$CompileResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/package$$CompileResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/package$$CompileResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/package$$CompileResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/package$$CompileResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/package$$CompileResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$CompileResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$CompileResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$CompileResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/package$$CompileResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/package$$CompileResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/package$$CompileResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/package$$CompileResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/package$$CompileResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/package$$CompileResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/package$$CompileResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/package$$CompileResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/package$$CompileResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/xpath\/package$$CompileResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/xpath\/package$$CompileResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/xpath\/package$$CompileResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/xpath\/package$$CompileResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/xpath\/package$$CompileResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/xpath\/package$$CompileResult.html"}, {"name" : "kantan.xpath.DecodeError", "shortDescription" : "Describes an error that occurred while decoding some XML content.", "object" : "kantan\/xpath\/DecodeError$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/xpath\/DecodeError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/DecodeError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/xpath\/DecodeError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/xpath\/DecodeError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/xpath\/DecodeError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/xpath\/DecodeError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/xpath\/DecodeError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/xpath\/DecodeError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/xpath\/DecodeError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/xpath\/DecodeError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/DecodeError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/DecodeError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/DecodeError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/xpath\/DecodeError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/xpath\/DecodeError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/xpath\/DecodeError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/xpath\/DecodeError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/DecodeError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/DecodeError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/DecodeError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/DecodeError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/DecodeError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/DecodeError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/DecodeError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/DecodeError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/DecodeError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/DecodeError.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/DecodeError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/DecodeError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/DecodeError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/DecodeError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/DecodeError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/DecodeError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/DecodeError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/DecodeError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/xpath\/DecodeError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/xpath\/DecodeError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/xpath\/DecodeError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "TypeError", "tail" : "", "member" : "kantan.xpath.DecodeError.TypeError", "link" : "kantan\/xpath\/DecodeError$.html#TypeError", "kind" : "object"}, {"label" : "TypeError", "tail" : "", "member" : "kantan.xpath.DecodeError.TypeError", "link" : "kantan\/xpath\/DecodeError$.html#TypeErrorextendsDecodeErrorwithProductwithSerializable", "kind" : "sealed case class"}, {"label" : "NotFound", "tail" : "", "member" : "kantan.xpath.DecodeError.NotFound", "link" : "kantan\/xpath\/DecodeError$.html#NotFound", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/DecodeError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/DecodeError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/DecodeError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/DecodeError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/DecodeError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/DecodeError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/DecodeError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/DecodeError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/DecodeError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/DecodeError$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/DecodeError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/DecodeError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/DecodeError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/DecodeError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/DecodeError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/DecodeError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/DecodeError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/DecodeError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/DecodeError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/xpath\/DecodeError.html", "kind" : "class"}, {"name" : "kantan.xpath.DecodeResult", "shortDescription" : "Provides instance creation methods for DecodeResult.", "object" : "kantan\/xpath\/DecodeResult$.html", "members_object" : [{"label" : "typeError", "tail" : "(e: Exception): DecodeResult[Nothing]", "member" : "kantan.xpath.DecodeResult.typeError", "link" : "kantan\/xpath\/DecodeResult$.html#typeError(e:Exception):kantan.xpath.DecodeResult[Nothing]", "kind" : "def"}, {"label" : "typeError", "tail" : "(str: String): DecodeResult[Nothing]", "member" : "kantan.xpath.DecodeResult.typeError", "link" : "kantan\/xpath\/DecodeResult$.html#typeError(str:String):kantan.xpath.DecodeResult[Nothing]", "kind" : "def"}, {"label" : "notFound", "tail" : ": DecodeResult[Nothing]", "member" : "kantan.xpath.DecodeResult.notFound", "link" : "kantan\/xpath\/DecodeResult$.html#notFound:kantan.xpath.DecodeResult[Nothing]", "kind" : "val"}, {"label" : "fromThrowable", "tail" : "(t: Throwable): TypeError", "member" : "kantan.xpath.DecodeResult.fromThrowable", "link" : "kantan\/xpath\/DecodeResult$.html#fromThrowable(t:Throwable):kantan.xpath.DecodeError.TypeError", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/xpath\/DecodeResult$.html#fromTry[S](t:scala.util.Try[S]):Either[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: => S): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/xpath\/DecodeResult$.html#apply[S](s:=>S):Either[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: DecodeError): Either[DecodeError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/xpath\/DecodeResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/xpath\/DecodeResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[DecodeError, S]])(bf: BuildFrom[M[Either[DecodeError, S]], S, M[S]]): Either[DecodeError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/xpath\/DecodeResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/DecodeResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/DecodeResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/DecodeResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/DecodeResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/DecodeResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/DecodeResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/DecodeResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/DecodeResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/DecodeResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/DecodeResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/DecodeResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/DecodeResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/DecodeResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/DecodeResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/DecodeResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/DecodeResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/DecodeResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/DecodeResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/DecodeResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/xpath\/package$$DecodeResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/xpath\/package$$DecodeResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/xpath\/package$$DecodeResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/xpath\/package$$DecodeResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/xpath\/package$$DecodeResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/xpath\/package$$DecodeResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/xpath\/package$$DecodeResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/xpath\/package$$DecodeResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/xpath\/package$$DecodeResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/xpath\/package$$DecodeResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/xpath\/package$$DecodeResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/xpath\/package$$DecodeResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/xpath\/package$$DecodeResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/xpath\/package$$DecodeResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/xpath\/package$$DecodeResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/xpath\/package$$DecodeResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/xpath\/package$$DecodeResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/xpath\/package$$DecodeResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/xpath\/package$$DecodeResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/package$$DecodeResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/xpath\/package$$DecodeResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/xpath\/package$$DecodeResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/xpath\/package$$DecodeResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/package$$DecodeResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/package$$DecodeResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/package$$DecodeResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/package$$DecodeResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/package$$DecodeResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/package$$DecodeResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/package$$DecodeResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$DecodeResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$DecodeResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$DecodeResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/package$$DecodeResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/package$$DecodeResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/package$$DecodeResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/package$$DecodeResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/package$$DecodeResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/package$$DecodeResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/package$$DecodeResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/package$$DecodeResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/package$$DecodeResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/xpath\/package$$DecodeResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/xpath\/package$$DecodeResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/xpath\/package$$DecodeResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/xpath\/package$$DecodeResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/xpath\/package$$DecodeResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/xpath\/package$$DecodeResult.html"}, {"name" : "kantan.xpath.GeneratedDecoders", "trait" : "kantan\/xpath\/GeneratedDecoders.html", "kind" : "trait", "members_trait" : [{"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression, x21: XPathExpression, x22: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20], arg20: Compiler[I21], arg21: Compiler[I22]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression,x21:kantan.xpath.XPathExpression,x22:kantan.xpath.XPathExpression)(implicitevidence$485:kantan.xpath.Compiler[I1],implicitevidence$486:kantan.xpath.Compiler[I2],implicitevidence$487:kantan.xpath.Compiler[I3],implicitevidence$488:kantan.xpath.Compiler[I4],implicitevidence$489:kantan.xpath.Compiler[I5],implicitevidence$490:kantan.xpath.Compiler[I6],implicitevidence$491:kantan.xpath.Compiler[I7],implicitevidence$492:kantan.xpath.Compiler[I8],implicitevidence$493:kantan.xpath.Compiler[I9],implicitevidence$494:kantan.xpath.Compiler[I10],implicitevidence$495:kantan.xpath.Compiler[I11],implicitevidence$496:kantan.xpath.Compiler[I12],implicitevidence$497:kantan.xpath.Compiler[I13],implicitevidence$498:kantan.xpath.Compiler[I14],implicitevidence$499:kantan.xpath.Compiler[I15],implicitevidence$500:kantan.xpath.Compiler[I16],implicitevidence$501:kantan.xpath.Compiler[I17],implicitevidence$502:kantan.xpath.Compiler[I18],implicitevidence$503:kantan.xpath.Compiler[I19],implicitevidence$504:kantan.xpath.Compiler[I20],implicitevidence$505:kantan.xpath.Compiler[I21],implicitevidence$506:kantan.xpath.Compiler[I22]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression, x21: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20], arg20: Compiler[I21]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression,x21:kantan.xpath.XPathExpression)(implicitevidence$464:kantan.xpath.Compiler[I1],implicitevidence$465:kantan.xpath.Compiler[I2],implicitevidence$466:kantan.xpath.Compiler[I3],implicitevidence$467:kantan.xpath.Compiler[I4],implicitevidence$468:kantan.xpath.Compiler[I5],implicitevidence$469:kantan.xpath.Compiler[I6],implicitevidence$470:kantan.xpath.Compiler[I7],implicitevidence$471:kantan.xpath.Compiler[I8],implicitevidence$472:kantan.xpath.Compiler[I9],implicitevidence$473:kantan.xpath.Compiler[I10],implicitevidence$474:kantan.xpath.Compiler[I11],implicitevidence$475:kantan.xpath.Compiler[I12],implicitevidence$476:kantan.xpath.Compiler[I13],implicitevidence$477:kantan.xpath.Compiler[I14],implicitevidence$478:kantan.xpath.Compiler[I15],implicitevidence$479:kantan.xpath.Compiler[I16],implicitevidence$480:kantan.xpath.Compiler[I17],implicitevidence$481:kantan.xpath.Compiler[I18],implicitevidence$482:kantan.xpath.Compiler[I19],implicitevidence$483:kantan.xpath.Compiler[I20],implicitevidence$484:kantan.xpath.Compiler[I21]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression)(implicitevidence$444:kantan.xpath.Compiler[I1],implicitevidence$445:kantan.xpath.Compiler[I2],implicitevidence$446:kantan.xpath.Compiler[I3],implicitevidence$447:kantan.xpath.Compiler[I4],implicitevidence$448:kantan.xpath.Compiler[I5],implicitevidence$449:kantan.xpath.Compiler[I6],implicitevidence$450:kantan.xpath.Compiler[I7],implicitevidence$451:kantan.xpath.Compiler[I8],implicitevidence$452:kantan.xpath.Compiler[I9],implicitevidence$453:kantan.xpath.Compiler[I10],implicitevidence$454:kantan.xpath.Compiler[I11],implicitevidence$455:kantan.xpath.Compiler[I12],implicitevidence$456:kantan.xpath.Compiler[I13],implicitevidence$457:kantan.xpath.Compiler[I14],implicitevidence$458:kantan.xpath.Compiler[I15],implicitevidence$459:kantan.xpath.Compiler[I16],implicitevidence$460:kantan.xpath.Compiler[I17],implicitevidence$461:kantan.xpath.Compiler[I18],implicitevidence$462:kantan.xpath.Compiler[I19],implicitevidence$463:kantan.xpath.Compiler[I20]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression)(implicitevidence$425:kantan.xpath.Compiler[I1],implicitevidence$426:kantan.xpath.Compiler[I2],implicitevidence$427:kantan.xpath.Compiler[I3],implicitevidence$428:kantan.xpath.Compiler[I4],implicitevidence$429:kantan.xpath.Compiler[I5],implicitevidence$430:kantan.xpath.Compiler[I6],implicitevidence$431:kantan.xpath.Compiler[I7],implicitevidence$432:kantan.xpath.Compiler[I8],implicitevidence$433:kantan.xpath.Compiler[I9],implicitevidence$434:kantan.xpath.Compiler[I10],implicitevidence$435:kantan.xpath.Compiler[I11],implicitevidence$436:kantan.xpath.Compiler[I12],implicitevidence$437:kantan.xpath.Compiler[I13],implicitevidence$438:kantan.xpath.Compiler[I14],implicitevidence$439:kantan.xpath.Compiler[I15],implicitevidence$440:kantan.xpath.Compiler[I16],implicitevidence$441:kantan.xpath.Compiler[I17],implicitevidence$442:kantan.xpath.Compiler[I18],implicitevidence$443:kantan.xpath.Compiler[I19]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression)(implicitevidence$407:kantan.xpath.Compiler[I1],implicitevidence$408:kantan.xpath.Compiler[I2],implicitevidence$409:kantan.xpath.Compiler[I3],implicitevidence$410:kantan.xpath.Compiler[I4],implicitevidence$411:kantan.xpath.Compiler[I5],implicitevidence$412:kantan.xpath.Compiler[I6],implicitevidence$413:kantan.xpath.Compiler[I7],implicitevidence$414:kantan.xpath.Compiler[I8],implicitevidence$415:kantan.xpath.Compiler[I9],implicitevidence$416:kantan.xpath.Compiler[I10],implicitevidence$417:kantan.xpath.Compiler[I11],implicitevidence$418:kantan.xpath.Compiler[I12],implicitevidence$419:kantan.xpath.Compiler[I13],implicitevidence$420:kantan.xpath.Compiler[I14],implicitevidence$421:kantan.xpath.Compiler[I15],implicitevidence$422:kantan.xpath.Compiler[I16],implicitevidence$423:kantan.xpath.Compiler[I17],implicitevidence$424:kantan.xpath.Compiler[I18]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression)(implicitevidence$390:kantan.xpath.Compiler[I1],implicitevidence$391:kantan.xpath.Compiler[I2],implicitevidence$392:kantan.xpath.Compiler[I3],implicitevidence$393:kantan.xpath.Compiler[I4],implicitevidence$394:kantan.xpath.Compiler[I5],implicitevidence$395:kantan.xpath.Compiler[I6],implicitevidence$396:kantan.xpath.Compiler[I7],implicitevidence$397:kantan.xpath.Compiler[I8],implicitevidence$398:kantan.xpath.Compiler[I9],implicitevidence$399:kantan.xpath.Compiler[I10],implicitevidence$400:kantan.xpath.Compiler[I11],implicitevidence$401:kantan.xpath.Compiler[I12],implicitevidence$402:kantan.xpath.Compiler[I13],implicitevidence$403:kantan.xpath.Compiler[I14],implicitevidence$404:kantan.xpath.Compiler[I15],implicitevidence$405:kantan.xpath.Compiler[I16],implicitevidence$406:kantan.xpath.Compiler[I17]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression)(implicitevidence$374:kantan.xpath.Compiler[I1],implicitevidence$375:kantan.xpath.Compiler[I2],implicitevidence$376:kantan.xpath.Compiler[I3],implicitevidence$377:kantan.xpath.Compiler[I4],implicitevidence$378:kantan.xpath.Compiler[I5],implicitevidence$379:kantan.xpath.Compiler[I6],implicitevidence$380:kantan.xpath.Compiler[I7],implicitevidence$381:kantan.xpath.Compiler[I8],implicitevidence$382:kantan.xpath.Compiler[I9],implicitevidence$383:kantan.xpath.Compiler[I10],implicitevidence$384:kantan.xpath.Compiler[I11],implicitevidence$385:kantan.xpath.Compiler[I12],implicitevidence$386:kantan.xpath.Compiler[I13],implicitevidence$387:kantan.xpath.Compiler[I14],implicitevidence$388:kantan.xpath.Compiler[I15],implicitevidence$389:kantan.xpath.Compiler[I16]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression)(implicitevidence$359:kantan.xpath.Compiler[I1],implicitevidence$360:kantan.xpath.Compiler[I2],implicitevidence$361:kantan.xpath.Compiler[I3],implicitevidence$362:kantan.xpath.Compiler[I4],implicitevidence$363:kantan.xpath.Compiler[I5],implicitevidence$364:kantan.xpath.Compiler[I6],implicitevidence$365:kantan.xpath.Compiler[I7],implicitevidence$366:kantan.xpath.Compiler[I8],implicitevidence$367:kantan.xpath.Compiler[I9],implicitevidence$368:kantan.xpath.Compiler[I10],implicitevidence$369:kantan.xpath.Compiler[I11],implicitevidence$370:kantan.xpath.Compiler[I12],implicitevidence$371:kantan.xpath.Compiler[I13],implicitevidence$372:kantan.xpath.Compiler[I14],implicitevidence$373:kantan.xpath.Compiler[I15]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression)(implicitevidence$345:kantan.xpath.Compiler[I1],implicitevidence$346:kantan.xpath.Compiler[I2],implicitevidence$347:kantan.xpath.Compiler[I3],implicitevidence$348:kantan.xpath.Compiler[I4],implicitevidence$349:kantan.xpath.Compiler[I5],implicitevidence$350:kantan.xpath.Compiler[I6],implicitevidence$351:kantan.xpath.Compiler[I7],implicitevidence$352:kantan.xpath.Compiler[I8],implicitevidence$353:kantan.xpath.Compiler[I9],implicitevidence$354:kantan.xpath.Compiler[I10],implicitevidence$355:kantan.xpath.Compiler[I11],implicitevidence$356:kantan.xpath.Compiler[I12],implicitevidence$357:kantan.xpath.Compiler[I13],implicitevidence$358:kantan.xpath.Compiler[I14]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression)(implicitevidence$332:kantan.xpath.Compiler[I1],implicitevidence$333:kantan.xpath.Compiler[I2],implicitevidence$334:kantan.xpath.Compiler[I3],implicitevidence$335:kantan.xpath.Compiler[I4],implicitevidence$336:kantan.xpath.Compiler[I5],implicitevidence$337:kantan.xpath.Compiler[I6],implicitevidence$338:kantan.xpath.Compiler[I7],implicitevidence$339:kantan.xpath.Compiler[I8],implicitevidence$340:kantan.xpath.Compiler[I9],implicitevidence$341:kantan.xpath.Compiler[I10],implicitevidence$342:kantan.xpath.Compiler[I11],implicitevidence$343:kantan.xpath.Compiler[I12],implicitevidence$344:kantan.xpath.Compiler[I13]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression)(implicitevidence$320:kantan.xpath.Compiler[I1],implicitevidence$321:kantan.xpath.Compiler[I2],implicitevidence$322:kantan.xpath.Compiler[I3],implicitevidence$323:kantan.xpath.Compiler[I4],implicitevidence$324:kantan.xpath.Compiler[I5],implicitevidence$325:kantan.xpath.Compiler[I6],implicitevidence$326:kantan.xpath.Compiler[I7],implicitevidence$327:kantan.xpath.Compiler[I8],implicitevidence$328:kantan.xpath.Compiler[I9],implicitevidence$329:kantan.xpath.Compiler[I10],implicitevidence$330:kantan.xpath.Compiler[I11],implicitevidence$331:kantan.xpath.Compiler[I12]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression)(implicitevidence$309:kantan.xpath.Compiler[I1],implicitevidence$310:kantan.xpath.Compiler[I2],implicitevidence$311:kantan.xpath.Compiler[I3],implicitevidence$312:kantan.xpath.Compiler[I4],implicitevidence$313:kantan.xpath.Compiler[I5],implicitevidence$314:kantan.xpath.Compiler[I6],implicitevidence$315:kantan.xpath.Compiler[I7],implicitevidence$316:kantan.xpath.Compiler[I8],implicitevidence$317:kantan.xpath.Compiler[I9],implicitevidence$318:kantan.xpath.Compiler[I10],implicitevidence$319:kantan.xpath.Compiler[I11]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression)(implicitevidence$299:kantan.xpath.Compiler[I1],implicitevidence$300:kantan.xpath.Compiler[I2],implicitevidence$301:kantan.xpath.Compiler[I3],implicitevidence$302:kantan.xpath.Compiler[I4],implicitevidence$303:kantan.xpath.Compiler[I5],implicitevidence$304:kantan.xpath.Compiler[I6],implicitevidence$305:kantan.xpath.Compiler[I7],implicitevidence$306:kantan.xpath.Compiler[I8],implicitevidence$307:kantan.xpath.Compiler[I9],implicitevidence$308:kantan.xpath.Compiler[I10]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression)(implicitevidence$290:kantan.xpath.Compiler[I1],implicitevidence$291:kantan.xpath.Compiler[I2],implicitevidence$292:kantan.xpath.Compiler[I3],implicitevidence$293:kantan.xpath.Compiler[I4],implicitevidence$294:kantan.xpath.Compiler[I5],implicitevidence$295:kantan.xpath.Compiler[I6],implicitevidence$296:kantan.xpath.Compiler[I7],implicitevidence$297:kantan.xpath.Compiler[I8],implicitevidence$298:kantan.xpath.Compiler[I9]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression)(implicitevidence$282:kantan.xpath.Compiler[I1],implicitevidence$283:kantan.xpath.Compiler[I2],implicitevidence$284:kantan.xpath.Compiler[I3],implicitevidence$285:kantan.xpath.Compiler[I4],implicitevidence$286:kantan.xpath.Compiler[I5],implicitevidence$287:kantan.xpath.Compiler[I6],implicitevidence$288:kantan.xpath.Compiler[I7],implicitevidence$289:kantan.xpath.Compiler[I8]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression)(implicitevidence$275:kantan.xpath.Compiler[I1],implicitevidence$276:kantan.xpath.Compiler[I2],implicitevidence$277:kantan.xpath.Compiler[I3],implicitevidence$278:kantan.xpath.Compiler[I4],implicitevidence$279:kantan.xpath.Compiler[I5],implicitevidence$280:kantan.xpath.Compiler[I6],implicitevidence$281:kantan.xpath.Compiler[I7]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6]): NodeDecoder[(I1, I2, I3, I4, I5, I6)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression)(implicitevidence$269:kantan.xpath.Compiler[I1],implicitevidence$270:kantan.xpath.Compiler[I2],implicitevidence$271:kantan.xpath.Compiler[I3],implicitevidence$272:kantan.xpath.Compiler[I4],implicitevidence$273:kantan.xpath.Compiler[I5],implicitevidence$274:kantan.xpath.Compiler[I6]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5]): NodeDecoder[(I1, I2, I3, I4, I5)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression)(implicitevidence$264:kantan.xpath.Compiler[I1],implicitevidence$265:kantan.xpath.Compiler[I2],implicitevidence$266:kantan.xpath.Compiler[I3],implicitevidence$267:kantan.xpath.Compiler[I4],implicitevidence$268:kantan.xpath.Compiler[I5]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4]): NodeDecoder[(I1, I2, I3, I4)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression)(implicitevidence$260:kantan.xpath.Compiler[I1],implicitevidence$261:kantan.xpath.Compiler[I2],implicitevidence$262:kantan.xpath.Compiler[I3],implicitevidence$263:kantan.xpath.Compiler[I4]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3]): NodeDecoder[(I1, I2, I3)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression)(implicitevidence$257:kantan.xpath.Compiler[I1],implicitevidence$258:kantan.xpath.Compiler[I2],implicitevidence$259:kantan.xpath.Compiler[I3]):kantan.xpath.NodeDecoder[(I1,I2,I3)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2]): NodeDecoder[(I1, I2)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression)(implicitevidence$255:kantan.xpath.Compiler[I1],implicitevidence$256:kantan.xpath.Compiler[I2]):kantan.xpath.NodeDecoder[(I1,I2)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression)(arg0: Compiler[I1]): NodeDecoder[(I1)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1](x1:kantan.xpath.XPathExpression)(implicitevidence$254:kantan.xpath.Compiler[I1]):kantan.xpath.NodeDecoder[(I1,)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]], x21: Query[DecodeResult[I21]], x22: Query[DecodeResult[I22]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]],x21:kantan.xpath.Query[kantan.xpath.DecodeResult[I21]],x22:kantan.xpath.Query[kantan.xpath.DecodeResult[I22]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]], x21: Query[DecodeResult[I21]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]],x21:kantan.xpath.Query[kantan.xpath.DecodeResult[I21]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6,I7](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]]): NodeDecoder[(I1, I2, I3, I4, I5, I6)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5,I6](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]]): NodeDecoder[(I1, I2, I3, I4, I5)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4,I5](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]]): NodeDecoder[(I1, I2, I3, I4)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3,I4](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]]): NodeDecoder[(I1, I2, I3)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2,I3](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]]):kantan.xpath.NodeDecoder[(I1,I2,I3)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]]): NodeDecoder[(I1, I2)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1,I2](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]]):kantan.xpath.NodeDecoder[(I1,I2)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]]): NodeDecoder[(I1)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/GeneratedDecoders.html#tuple[I1](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]]):kantan.xpath.NodeDecoder[(I1,)]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression, x21: XPathExpression, x22: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20], arg20: Compiler[I21], arg21: Compiler[I22]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression,x21:kantan.xpath.XPathExpression,x22:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)=>O)(implicitevidence$232:kantan.xpath.Compiler[I1],implicitevidence$233:kantan.xpath.Compiler[I2],implicitevidence$234:kantan.xpath.Compiler[I3],implicitevidence$235:kantan.xpath.Compiler[I4],implicitevidence$236:kantan.xpath.Compiler[I5],implicitevidence$237:kantan.xpath.Compiler[I6],implicitevidence$238:kantan.xpath.Compiler[I7],implicitevidence$239:kantan.xpath.Compiler[I8],implicitevidence$240:kantan.xpath.Compiler[I9],implicitevidence$241:kantan.xpath.Compiler[I10],implicitevidence$242:kantan.xpath.Compiler[I11],implicitevidence$243:kantan.xpath.Compiler[I12],implicitevidence$244:kantan.xpath.Compiler[I13],implicitevidence$245:kantan.xpath.Compiler[I14],implicitevidence$246:kantan.xpath.Compiler[I15],implicitevidence$247:kantan.xpath.Compiler[I16],implicitevidence$248:kantan.xpath.Compiler[I17],implicitevidence$249:kantan.xpath.Compiler[I18],implicitevidence$250:kantan.xpath.Compiler[I19],implicitevidence$251:kantan.xpath.Compiler[I20],implicitevidence$252:kantan.xpath.Compiler[I21],implicitevidence$253:kantan.xpath.Compiler[I22]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression, x21: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20], arg20: Compiler[I21]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression,x21:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)=>O)(implicitevidence$211:kantan.xpath.Compiler[I1],implicitevidence$212:kantan.xpath.Compiler[I2],implicitevidence$213:kantan.xpath.Compiler[I3],implicitevidence$214:kantan.xpath.Compiler[I4],implicitevidence$215:kantan.xpath.Compiler[I5],implicitevidence$216:kantan.xpath.Compiler[I6],implicitevidence$217:kantan.xpath.Compiler[I7],implicitevidence$218:kantan.xpath.Compiler[I8],implicitevidence$219:kantan.xpath.Compiler[I9],implicitevidence$220:kantan.xpath.Compiler[I10],implicitevidence$221:kantan.xpath.Compiler[I11],implicitevidence$222:kantan.xpath.Compiler[I12],implicitevidence$223:kantan.xpath.Compiler[I13],implicitevidence$224:kantan.xpath.Compiler[I14],implicitevidence$225:kantan.xpath.Compiler[I15],implicitevidence$226:kantan.xpath.Compiler[I16],implicitevidence$227:kantan.xpath.Compiler[I17],implicitevidence$228:kantan.xpath.Compiler[I18],implicitevidence$229:kantan.xpath.Compiler[I19],implicitevidence$230:kantan.xpath.Compiler[I20],implicitevidence$231:kantan.xpath.Compiler[I21]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)=>O)(implicitevidence$191:kantan.xpath.Compiler[I1],implicitevidence$192:kantan.xpath.Compiler[I2],implicitevidence$193:kantan.xpath.Compiler[I3],implicitevidence$194:kantan.xpath.Compiler[I4],implicitevidence$195:kantan.xpath.Compiler[I5],implicitevidence$196:kantan.xpath.Compiler[I6],implicitevidence$197:kantan.xpath.Compiler[I7],implicitevidence$198:kantan.xpath.Compiler[I8],implicitevidence$199:kantan.xpath.Compiler[I9],implicitevidence$200:kantan.xpath.Compiler[I10],implicitevidence$201:kantan.xpath.Compiler[I11],implicitevidence$202:kantan.xpath.Compiler[I12],implicitevidence$203:kantan.xpath.Compiler[I13],implicitevidence$204:kantan.xpath.Compiler[I14],implicitevidence$205:kantan.xpath.Compiler[I15],implicitevidence$206:kantan.xpath.Compiler[I16],implicitevidence$207:kantan.xpath.Compiler[I17],implicitevidence$208:kantan.xpath.Compiler[I18],implicitevidence$209:kantan.xpath.Compiler[I19],implicitevidence$210:kantan.xpath.Compiler[I20]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)=>O)(implicitevidence$172:kantan.xpath.Compiler[I1],implicitevidence$173:kantan.xpath.Compiler[I2],implicitevidence$174:kantan.xpath.Compiler[I3],implicitevidence$175:kantan.xpath.Compiler[I4],implicitevidence$176:kantan.xpath.Compiler[I5],implicitevidence$177:kantan.xpath.Compiler[I6],implicitevidence$178:kantan.xpath.Compiler[I7],implicitevidence$179:kantan.xpath.Compiler[I8],implicitevidence$180:kantan.xpath.Compiler[I9],implicitevidence$181:kantan.xpath.Compiler[I10],implicitevidence$182:kantan.xpath.Compiler[I11],implicitevidence$183:kantan.xpath.Compiler[I12],implicitevidence$184:kantan.xpath.Compiler[I13],implicitevidence$185:kantan.xpath.Compiler[I14],implicitevidence$186:kantan.xpath.Compiler[I15],implicitevidence$187:kantan.xpath.Compiler[I16],implicitevidence$188:kantan.xpath.Compiler[I17],implicitevidence$189:kantan.xpath.Compiler[I18],implicitevidence$190:kantan.xpath.Compiler[I19]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)=>O)(implicitevidence$154:kantan.xpath.Compiler[I1],implicitevidence$155:kantan.xpath.Compiler[I2],implicitevidence$156:kantan.xpath.Compiler[I3],implicitevidence$157:kantan.xpath.Compiler[I4],implicitevidence$158:kantan.xpath.Compiler[I5],implicitevidence$159:kantan.xpath.Compiler[I6],implicitevidence$160:kantan.xpath.Compiler[I7],implicitevidence$161:kantan.xpath.Compiler[I8],implicitevidence$162:kantan.xpath.Compiler[I9],implicitevidence$163:kantan.xpath.Compiler[I10],implicitevidence$164:kantan.xpath.Compiler[I11],implicitevidence$165:kantan.xpath.Compiler[I12],implicitevidence$166:kantan.xpath.Compiler[I13],implicitevidence$167:kantan.xpath.Compiler[I14],implicitevidence$168:kantan.xpath.Compiler[I15],implicitevidence$169:kantan.xpath.Compiler[I16],implicitevidence$170:kantan.xpath.Compiler[I17],implicitevidence$171:kantan.xpath.Compiler[I18]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)=>O)(implicitevidence$137:kantan.xpath.Compiler[I1],implicitevidence$138:kantan.xpath.Compiler[I2],implicitevidence$139:kantan.xpath.Compiler[I3],implicitevidence$140:kantan.xpath.Compiler[I4],implicitevidence$141:kantan.xpath.Compiler[I5],implicitevidence$142:kantan.xpath.Compiler[I6],implicitevidence$143:kantan.xpath.Compiler[I7],implicitevidence$144:kantan.xpath.Compiler[I8],implicitevidence$145:kantan.xpath.Compiler[I9],implicitevidence$146:kantan.xpath.Compiler[I10],implicitevidence$147:kantan.xpath.Compiler[I11],implicitevidence$148:kantan.xpath.Compiler[I12],implicitevidence$149:kantan.xpath.Compiler[I13],implicitevidence$150:kantan.xpath.Compiler[I14],implicitevidence$151:kantan.xpath.Compiler[I15],implicitevidence$152:kantan.xpath.Compiler[I16],implicitevidence$153:kantan.xpath.Compiler[I17]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)=>O)(implicitevidence$121:kantan.xpath.Compiler[I1],implicitevidence$122:kantan.xpath.Compiler[I2],implicitevidence$123:kantan.xpath.Compiler[I3],implicitevidence$124:kantan.xpath.Compiler[I4],implicitevidence$125:kantan.xpath.Compiler[I5],implicitevidence$126:kantan.xpath.Compiler[I6],implicitevidence$127:kantan.xpath.Compiler[I7],implicitevidence$128:kantan.xpath.Compiler[I8],implicitevidence$129:kantan.xpath.Compiler[I9],implicitevidence$130:kantan.xpath.Compiler[I10],implicitevidence$131:kantan.xpath.Compiler[I11],implicitevidence$132:kantan.xpath.Compiler[I12],implicitevidence$133:kantan.xpath.Compiler[I13],implicitevidence$134:kantan.xpath.Compiler[I14],implicitevidence$135:kantan.xpath.Compiler[I15],implicitevidence$136:kantan.xpath.Compiler[I16]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)=>O)(implicitevidence$106:kantan.xpath.Compiler[I1],implicitevidence$107:kantan.xpath.Compiler[I2],implicitevidence$108:kantan.xpath.Compiler[I3],implicitevidence$109:kantan.xpath.Compiler[I4],implicitevidence$110:kantan.xpath.Compiler[I5],implicitevidence$111:kantan.xpath.Compiler[I6],implicitevidence$112:kantan.xpath.Compiler[I7],implicitevidence$113:kantan.xpath.Compiler[I8],implicitevidence$114:kantan.xpath.Compiler[I9],implicitevidence$115:kantan.xpath.Compiler[I10],implicitevidence$116:kantan.xpath.Compiler[I11],implicitevidence$117:kantan.xpath.Compiler[I12],implicitevidence$118:kantan.xpath.Compiler[I13],implicitevidence$119:kantan.xpath.Compiler[I14],implicitevidence$120:kantan.xpath.Compiler[I15]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)=>O)(implicitevidence$92:kantan.xpath.Compiler[I1],implicitevidence$93:kantan.xpath.Compiler[I2],implicitevidence$94:kantan.xpath.Compiler[I3],implicitevidence$95:kantan.xpath.Compiler[I4],implicitevidence$96:kantan.xpath.Compiler[I5],implicitevidence$97:kantan.xpath.Compiler[I6],implicitevidence$98:kantan.xpath.Compiler[I7],implicitevidence$99:kantan.xpath.Compiler[I8],implicitevidence$100:kantan.xpath.Compiler[I9],implicitevidence$101:kantan.xpath.Compiler[I10],implicitevidence$102:kantan.xpath.Compiler[I11],implicitevidence$103:kantan.xpath.Compiler[I12],implicitevidence$104:kantan.xpath.Compiler[I13],implicitevidence$105:kantan.xpath.Compiler[I14]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)=>O)(implicitevidence$79:kantan.xpath.Compiler[I1],implicitevidence$80:kantan.xpath.Compiler[I2],implicitevidence$81:kantan.xpath.Compiler[I3],implicitevidence$82:kantan.xpath.Compiler[I4],implicitevidence$83:kantan.xpath.Compiler[I5],implicitevidence$84:kantan.xpath.Compiler[I6],implicitevidence$85:kantan.xpath.Compiler[I7],implicitevidence$86:kantan.xpath.Compiler[I8],implicitevidence$87:kantan.xpath.Compiler[I9],implicitevidence$88:kantan.xpath.Compiler[I10],implicitevidence$89:kantan.xpath.Compiler[I11],implicitevidence$90:kantan.xpath.Compiler[I12],implicitevidence$91:kantan.xpath.Compiler[I13]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)=>O)(implicitevidence$67:kantan.xpath.Compiler[I1],implicitevidence$68:kantan.xpath.Compiler[I2],implicitevidence$69:kantan.xpath.Compiler[I3],implicitevidence$70:kantan.xpath.Compiler[I4],implicitevidence$71:kantan.xpath.Compiler[I5],implicitevidence$72:kantan.xpath.Compiler[I6],implicitevidence$73:kantan.xpath.Compiler[I7],implicitevidence$74:kantan.xpath.Compiler[I8],implicitevidence$75:kantan.xpath.Compiler[I9],implicitevidence$76:kantan.xpath.Compiler[I10],implicitevidence$77:kantan.xpath.Compiler[I11],implicitevidence$78:kantan.xpath.Compiler[I12]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)=>O)(implicitevidence$56:kantan.xpath.Compiler[I1],implicitevidence$57:kantan.xpath.Compiler[I2],implicitevidence$58:kantan.xpath.Compiler[I3],implicitevidence$59:kantan.xpath.Compiler[I4],implicitevidence$60:kantan.xpath.Compiler[I5],implicitevidence$61:kantan.xpath.Compiler[I6],implicitevidence$62:kantan.xpath.Compiler[I7],implicitevidence$63:kantan.xpath.Compiler[I8],implicitevidence$64:kantan.xpath.Compiler[I9],implicitevidence$65:kantan.xpath.Compiler[I10],implicitevidence$66:kantan.xpath.Compiler[I11]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)=>O)(implicitevidence$46:kantan.xpath.Compiler[I1],implicitevidence$47:kantan.xpath.Compiler[I2],implicitevidence$48:kantan.xpath.Compiler[I3],implicitevidence$49:kantan.xpath.Compiler[I4],implicitevidence$50:kantan.xpath.Compiler[I5],implicitevidence$51:kantan.xpath.Compiler[I6],implicitevidence$52:kantan.xpath.Compiler[I7],implicitevidence$53:kantan.xpath.Compiler[I8],implicitevidence$54:kantan.xpath.Compiler[I9],implicitevidence$55:kantan.xpath.Compiler[I10]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9)=>O)(implicitevidence$37:kantan.xpath.Compiler[I1],implicitevidence$38:kantan.xpath.Compiler[I2],implicitevidence$39:kantan.xpath.Compiler[I3],implicitevidence$40:kantan.xpath.Compiler[I4],implicitevidence$41:kantan.xpath.Compiler[I5],implicitevidence$42:kantan.xpath.Compiler[I6],implicitevidence$43:kantan.xpath.Compiler[I7],implicitevidence$44:kantan.xpath.Compiler[I8],implicitevidence$45:kantan.xpath.Compiler[I9]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8)=>O)(implicitevidence$29:kantan.xpath.Compiler[I1],implicitevidence$30:kantan.xpath.Compiler[I2],implicitevidence$31:kantan.xpath.Compiler[I3],implicitevidence$32:kantan.xpath.Compiler[I4],implicitevidence$33:kantan.xpath.Compiler[I5],implicitevidence$34:kantan.xpath.Compiler[I6],implicitevidence$35:kantan.xpath.Compiler[I7],implicitevidence$36:kantan.xpath.Compiler[I8]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7)=>O)(implicitevidence$22:kantan.xpath.Compiler[I1],implicitevidence$23:kantan.xpath.Compiler[I2],implicitevidence$24:kantan.xpath.Compiler[I3],implicitevidence$25:kantan.xpath.Compiler[I4],implicitevidence$26:kantan.xpath.Compiler[I5],implicitevidence$27:kantan.xpath.Compiler[I6],implicitevidence$28:kantan.xpath.Compiler[I7]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression)(f: (I1, I2, I3, I4, I5, I6) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6)=>O)(implicitevidence$16:kantan.xpath.Compiler[I1],implicitevidence$17:kantan.xpath.Compiler[I2],implicitevidence$18:kantan.xpath.Compiler[I3],implicitevidence$19:kantan.xpath.Compiler[I4],implicitevidence$20:kantan.xpath.Compiler[I5],implicitevidence$21:kantan.xpath.Compiler[I6]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression)(f: (I1, I2, I3, I4, I5) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5)=>O)(implicitevidence$11:kantan.xpath.Compiler[I1],implicitevidence$12:kantan.xpath.Compiler[I2],implicitevidence$13:kantan.xpath.Compiler[I3],implicitevidence$14:kantan.xpath.Compiler[I4],implicitevidence$15:kantan.xpath.Compiler[I5]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression)(f: (I1, I2, I3, I4) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4)=>O)(implicitevidence$7:kantan.xpath.Compiler[I1],implicitevidence$8:kantan.xpath.Compiler[I2],implicitevidence$9:kantan.xpath.Compiler[I3],implicitevidence$10:kantan.xpath.Compiler[I4]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression)(f: (I1, I2, I3) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression)(f:(I1,I2,I3)=>O)(implicitevidence$4:kantan.xpath.Compiler[I1],implicitevidence$5:kantan.xpath.Compiler[I2],implicitevidence$6:kantan.xpath.Compiler[I3]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression)(f: (I1, I2) => O)(arg0: Compiler[I1], arg1: Compiler[I2]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression)(f:(I1,I2)=>O)(implicitevidence$2:kantan.xpath.Compiler[I1],implicitevidence$3:kantan.xpath.Compiler[I2]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression)(f: (I1) => O)(arg0: Compiler[I1]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,O](x1:kantan.xpath.XPathExpression)(f:I1=>O)(implicitevidence$1:kantan.xpath.Compiler[I1]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]], x21: Query[DecodeResult[I21]], x22: Query[DecodeResult[I22]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]],x21:kantan.xpath.Query[kantan.xpath.DecodeResult[I21]],x22:kantan.xpath.Query[kantan.xpath.DecodeResult[I22]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]], x21: Query[DecodeResult[I21]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]],x21:kantan.xpath.Query[kantan.xpath.DecodeResult[I21]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]])(f: (I1, I2, I3, I4, I5, I6, I7, I8) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]])(f:(I1,I2,I3,I4,I5,I6,I7,I8)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]])(f: (I1, I2, I3, I4, I5, I6, I7) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,I7,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]])(f:(I1,I2,I3,I4,I5,I6,I7)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]])(f: (I1, I2, I3, I4, I5, I6) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,I6,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]])(f:(I1,I2,I3,I4,I5,I6)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]])(f: (I1, I2, I3, I4, I5) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,I5,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]])(f:(I1,I2,I3,I4,I5)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]])(f: (I1, I2, I3, I4) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,I4,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]])(f:(I1,I2,I3,I4)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]])(f: (I1, I2, I3) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,I3,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]])(f:(I1,I2,I3)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]])(f: (I1, I2) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,I2,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]])(f:(I1,I2)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]])(f: (I1) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/GeneratedDecoders.html#decoder[I1,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]])(f:I1=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/GeneratedDecoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/GeneratedDecoders.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/GeneratedDecoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/GeneratedDecoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/GeneratedDecoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/GeneratedDecoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/GeneratedDecoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/GeneratedDecoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/GeneratedDecoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/GeneratedDecoders.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/GeneratedDecoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/GeneratedDecoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/GeneratedDecoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/GeneratedDecoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/GeneratedDecoders.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/GeneratedDecoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/GeneratedDecoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/GeneratedDecoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/GeneratedDecoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.xpath.implicits", "shortDescription" : "", "object" : "kantan\/xpath\/implicits$.html", "members_object" : [{"label" : "toXmlSourceOps", "tail" : "(a: A)(arg0: XmlSource[A]): XmlSourceOps[A]", "member" : "kantan.xpath.ops.ToXmlSourceOps.toXmlSourceOps", "link" : "kantan\/xpath\/implicits$.html#toXmlSourceOps[A](a:A)(implicitevidence$4:kantan.xpath.XmlSource[A]):kantan.xpath.ops.XmlSourceOps[A]", "kind" : "implicit def"}, {"label" : "toXPathExpressionOps", "tail" : "(expr: Query[DecodeResult[A]]): ExpressionOps[A]", "member" : "kantan.xpath.ops.ToExpressionOps.toXPathExpressionOps", "link" : "kantan\/xpath\/implicits$.html#toXPathExpressionOps[A](expr:kantan.xpath.Query[kantan.xpath.DecodeResult[A]]):kantan.xpath.ops.ExpressionOps[A]", "kind" : "implicit def"}, {"label" : "toXPathLiteral", "tail" : "(sc: StringContext): XPathLiteral", "member" : "kantan.xpath.literals.ToXPathLiteral.toXPathLiteral", "link" : "kantan\/xpath\/implicits$.html#toXPathLiteral(sc:StringContext):kantan.xpath.literals.XPathLiteral", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/implicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/implicits$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/implicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/implicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/implicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/implicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/implicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/implicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/implicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/implicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/implicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/implicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/implicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/implicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/implicits$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/implicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/implicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/implicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/implicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.xpath.LowPriorityXmlSourceInstances", "trait" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html", "kind" : "trait", "members_trait" : [{"label" : "fromReaderResource", "tail" : "(arg0: ReaderResource[A], parser: XmlParser): XmlSource[A]", "member" : "kantan.xpath.LowPriorityXmlSourceInstances.fromReaderResource", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#fromReaderResource[A](implicitevidence$4:kantan.codecs.resource.ReaderResource[A],implicitparser:kantan.xpath.XmlParser):kantan.xpath.XmlSource[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/LowPriorityXmlSourceInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.xpath.NodeDecoder", "shortDescription" : "Provides instance creation and summoning methods.", "object" : "kantan\/xpath\/NodeDecoder$.html", "members_object" : [{"label" : "dateDecoder", "tail" : "(format: DateFormat): NodeDecoder[Date]", "member" : "kantan.xpath.NodeDecoder.dateDecoder", "link" : "kantan\/xpath\/NodeDecoder$.html#dateDecoder(format:java.text.DateFormat):kantan.xpath.NodeDecoder[java.util.Date]", "kind" : "def"}, {"label" : "fromFound", "tail" : "(f: (Node) => DecodeResult[A]): NodeDecoder[A]", "member" : "kantan.xpath.NodeDecoder.fromFound", "link" : "kantan\/xpath\/NodeDecoder$.html#fromFound[A](f:kantan.xpath.Node=>kantan.xpath.DecodeResult[A]):kantan.xpath.NodeDecoder[A]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(ds: Decoder[Option[Node], D, DecodeError, codecs.type]*)(i: IsError[DecodeError]): Decoder[Option[Node], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.oneOf", "link" : "kantan\/xpath\/NodeDecoder$.html#oneOf[D](ds:kantan.codecs.Decoder[E,D,F,T]*)(impliciti:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromPartial", "tail" : "(f: PartialFunction[Option[Node], Either[DecodeError, D]])(t: IsError[DecodeError]): Decoder[Option[Node], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromPartial", "link" : "kantan\/xpath\/NodeDecoder$.html#fromPartial[D](f:PartialFunction[E,Either[F,D]])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromUnsafe", "tail" : "(f: (Option[Node]) => D)(t: IsError[DecodeError]): Decoder[Option[Node], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromUnsafe", "link" : "kantan\/xpath\/NodeDecoder$.html#fromUnsafe[D](f:E=>D)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (Option[Node]) => Either[DecodeError, D]): Decoder[Option[Node], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.from", "link" : "kantan\/xpath\/NodeDecoder$.html#from[D](f:E=>Either[F,D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Decoder[Option[Node], D, DecodeError, codecs.type]): Decoder[Option[Node], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.apply", "link" : "kantan\/xpath\/NodeDecoder$.html#apply[D](implicitev:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "macro def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression, x21: XPathExpression, x22: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20], arg20: Compiler[I21], arg21: Compiler[I22]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression,x21:kantan.xpath.XPathExpression,x22:kantan.xpath.XPathExpression)(implicitevidence$485:kantan.xpath.Compiler[I1],implicitevidence$486:kantan.xpath.Compiler[I2],implicitevidence$487:kantan.xpath.Compiler[I3],implicitevidence$488:kantan.xpath.Compiler[I4],implicitevidence$489:kantan.xpath.Compiler[I5],implicitevidence$490:kantan.xpath.Compiler[I6],implicitevidence$491:kantan.xpath.Compiler[I7],implicitevidence$492:kantan.xpath.Compiler[I8],implicitevidence$493:kantan.xpath.Compiler[I9],implicitevidence$494:kantan.xpath.Compiler[I10],implicitevidence$495:kantan.xpath.Compiler[I11],implicitevidence$496:kantan.xpath.Compiler[I12],implicitevidence$497:kantan.xpath.Compiler[I13],implicitevidence$498:kantan.xpath.Compiler[I14],implicitevidence$499:kantan.xpath.Compiler[I15],implicitevidence$500:kantan.xpath.Compiler[I16],implicitevidence$501:kantan.xpath.Compiler[I17],implicitevidence$502:kantan.xpath.Compiler[I18],implicitevidence$503:kantan.xpath.Compiler[I19],implicitevidence$504:kantan.xpath.Compiler[I20],implicitevidence$505:kantan.xpath.Compiler[I21],implicitevidence$506:kantan.xpath.Compiler[I22]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression, x21: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20], arg20: Compiler[I21]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression,x21:kantan.xpath.XPathExpression)(implicitevidence$464:kantan.xpath.Compiler[I1],implicitevidence$465:kantan.xpath.Compiler[I2],implicitevidence$466:kantan.xpath.Compiler[I3],implicitevidence$467:kantan.xpath.Compiler[I4],implicitevidence$468:kantan.xpath.Compiler[I5],implicitevidence$469:kantan.xpath.Compiler[I6],implicitevidence$470:kantan.xpath.Compiler[I7],implicitevidence$471:kantan.xpath.Compiler[I8],implicitevidence$472:kantan.xpath.Compiler[I9],implicitevidence$473:kantan.xpath.Compiler[I10],implicitevidence$474:kantan.xpath.Compiler[I11],implicitevidence$475:kantan.xpath.Compiler[I12],implicitevidence$476:kantan.xpath.Compiler[I13],implicitevidence$477:kantan.xpath.Compiler[I14],implicitevidence$478:kantan.xpath.Compiler[I15],implicitevidence$479:kantan.xpath.Compiler[I16],implicitevidence$480:kantan.xpath.Compiler[I17],implicitevidence$481:kantan.xpath.Compiler[I18],implicitevidence$482:kantan.xpath.Compiler[I19],implicitevidence$483:kantan.xpath.Compiler[I20],implicitevidence$484:kantan.xpath.Compiler[I21]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression)(implicitevidence$444:kantan.xpath.Compiler[I1],implicitevidence$445:kantan.xpath.Compiler[I2],implicitevidence$446:kantan.xpath.Compiler[I3],implicitevidence$447:kantan.xpath.Compiler[I4],implicitevidence$448:kantan.xpath.Compiler[I5],implicitevidence$449:kantan.xpath.Compiler[I6],implicitevidence$450:kantan.xpath.Compiler[I7],implicitevidence$451:kantan.xpath.Compiler[I8],implicitevidence$452:kantan.xpath.Compiler[I9],implicitevidence$453:kantan.xpath.Compiler[I10],implicitevidence$454:kantan.xpath.Compiler[I11],implicitevidence$455:kantan.xpath.Compiler[I12],implicitevidence$456:kantan.xpath.Compiler[I13],implicitevidence$457:kantan.xpath.Compiler[I14],implicitevidence$458:kantan.xpath.Compiler[I15],implicitevidence$459:kantan.xpath.Compiler[I16],implicitevidence$460:kantan.xpath.Compiler[I17],implicitevidence$461:kantan.xpath.Compiler[I18],implicitevidence$462:kantan.xpath.Compiler[I19],implicitevidence$463:kantan.xpath.Compiler[I20]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression)(implicitevidence$425:kantan.xpath.Compiler[I1],implicitevidence$426:kantan.xpath.Compiler[I2],implicitevidence$427:kantan.xpath.Compiler[I3],implicitevidence$428:kantan.xpath.Compiler[I4],implicitevidence$429:kantan.xpath.Compiler[I5],implicitevidence$430:kantan.xpath.Compiler[I6],implicitevidence$431:kantan.xpath.Compiler[I7],implicitevidence$432:kantan.xpath.Compiler[I8],implicitevidence$433:kantan.xpath.Compiler[I9],implicitevidence$434:kantan.xpath.Compiler[I10],implicitevidence$435:kantan.xpath.Compiler[I11],implicitevidence$436:kantan.xpath.Compiler[I12],implicitevidence$437:kantan.xpath.Compiler[I13],implicitevidence$438:kantan.xpath.Compiler[I14],implicitevidence$439:kantan.xpath.Compiler[I15],implicitevidence$440:kantan.xpath.Compiler[I16],implicitevidence$441:kantan.xpath.Compiler[I17],implicitevidence$442:kantan.xpath.Compiler[I18],implicitevidence$443:kantan.xpath.Compiler[I19]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression)(implicitevidence$407:kantan.xpath.Compiler[I1],implicitevidence$408:kantan.xpath.Compiler[I2],implicitevidence$409:kantan.xpath.Compiler[I3],implicitevidence$410:kantan.xpath.Compiler[I4],implicitevidence$411:kantan.xpath.Compiler[I5],implicitevidence$412:kantan.xpath.Compiler[I6],implicitevidence$413:kantan.xpath.Compiler[I7],implicitevidence$414:kantan.xpath.Compiler[I8],implicitevidence$415:kantan.xpath.Compiler[I9],implicitevidence$416:kantan.xpath.Compiler[I10],implicitevidence$417:kantan.xpath.Compiler[I11],implicitevidence$418:kantan.xpath.Compiler[I12],implicitevidence$419:kantan.xpath.Compiler[I13],implicitevidence$420:kantan.xpath.Compiler[I14],implicitevidence$421:kantan.xpath.Compiler[I15],implicitevidence$422:kantan.xpath.Compiler[I16],implicitevidence$423:kantan.xpath.Compiler[I17],implicitevidence$424:kantan.xpath.Compiler[I18]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression)(implicitevidence$390:kantan.xpath.Compiler[I1],implicitevidence$391:kantan.xpath.Compiler[I2],implicitevidence$392:kantan.xpath.Compiler[I3],implicitevidence$393:kantan.xpath.Compiler[I4],implicitevidence$394:kantan.xpath.Compiler[I5],implicitevidence$395:kantan.xpath.Compiler[I6],implicitevidence$396:kantan.xpath.Compiler[I7],implicitevidence$397:kantan.xpath.Compiler[I8],implicitevidence$398:kantan.xpath.Compiler[I9],implicitevidence$399:kantan.xpath.Compiler[I10],implicitevidence$400:kantan.xpath.Compiler[I11],implicitevidence$401:kantan.xpath.Compiler[I12],implicitevidence$402:kantan.xpath.Compiler[I13],implicitevidence$403:kantan.xpath.Compiler[I14],implicitevidence$404:kantan.xpath.Compiler[I15],implicitevidence$405:kantan.xpath.Compiler[I16],implicitevidence$406:kantan.xpath.Compiler[I17]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression)(implicitevidence$374:kantan.xpath.Compiler[I1],implicitevidence$375:kantan.xpath.Compiler[I2],implicitevidence$376:kantan.xpath.Compiler[I3],implicitevidence$377:kantan.xpath.Compiler[I4],implicitevidence$378:kantan.xpath.Compiler[I5],implicitevidence$379:kantan.xpath.Compiler[I6],implicitevidence$380:kantan.xpath.Compiler[I7],implicitevidence$381:kantan.xpath.Compiler[I8],implicitevidence$382:kantan.xpath.Compiler[I9],implicitevidence$383:kantan.xpath.Compiler[I10],implicitevidence$384:kantan.xpath.Compiler[I11],implicitevidence$385:kantan.xpath.Compiler[I12],implicitevidence$386:kantan.xpath.Compiler[I13],implicitevidence$387:kantan.xpath.Compiler[I14],implicitevidence$388:kantan.xpath.Compiler[I15],implicitevidence$389:kantan.xpath.Compiler[I16]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression)(implicitevidence$359:kantan.xpath.Compiler[I1],implicitevidence$360:kantan.xpath.Compiler[I2],implicitevidence$361:kantan.xpath.Compiler[I3],implicitevidence$362:kantan.xpath.Compiler[I4],implicitevidence$363:kantan.xpath.Compiler[I5],implicitevidence$364:kantan.xpath.Compiler[I6],implicitevidence$365:kantan.xpath.Compiler[I7],implicitevidence$366:kantan.xpath.Compiler[I8],implicitevidence$367:kantan.xpath.Compiler[I9],implicitevidence$368:kantan.xpath.Compiler[I10],implicitevidence$369:kantan.xpath.Compiler[I11],implicitevidence$370:kantan.xpath.Compiler[I12],implicitevidence$371:kantan.xpath.Compiler[I13],implicitevidence$372:kantan.xpath.Compiler[I14],implicitevidence$373:kantan.xpath.Compiler[I15]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression)(implicitevidence$345:kantan.xpath.Compiler[I1],implicitevidence$346:kantan.xpath.Compiler[I2],implicitevidence$347:kantan.xpath.Compiler[I3],implicitevidence$348:kantan.xpath.Compiler[I4],implicitevidence$349:kantan.xpath.Compiler[I5],implicitevidence$350:kantan.xpath.Compiler[I6],implicitevidence$351:kantan.xpath.Compiler[I7],implicitevidence$352:kantan.xpath.Compiler[I8],implicitevidence$353:kantan.xpath.Compiler[I9],implicitevidence$354:kantan.xpath.Compiler[I10],implicitevidence$355:kantan.xpath.Compiler[I11],implicitevidence$356:kantan.xpath.Compiler[I12],implicitevidence$357:kantan.xpath.Compiler[I13],implicitevidence$358:kantan.xpath.Compiler[I14]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression)(implicitevidence$332:kantan.xpath.Compiler[I1],implicitevidence$333:kantan.xpath.Compiler[I2],implicitevidence$334:kantan.xpath.Compiler[I3],implicitevidence$335:kantan.xpath.Compiler[I4],implicitevidence$336:kantan.xpath.Compiler[I5],implicitevidence$337:kantan.xpath.Compiler[I6],implicitevidence$338:kantan.xpath.Compiler[I7],implicitevidence$339:kantan.xpath.Compiler[I8],implicitevidence$340:kantan.xpath.Compiler[I9],implicitevidence$341:kantan.xpath.Compiler[I10],implicitevidence$342:kantan.xpath.Compiler[I11],implicitevidence$343:kantan.xpath.Compiler[I12],implicitevidence$344:kantan.xpath.Compiler[I13]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression)(implicitevidence$320:kantan.xpath.Compiler[I1],implicitevidence$321:kantan.xpath.Compiler[I2],implicitevidence$322:kantan.xpath.Compiler[I3],implicitevidence$323:kantan.xpath.Compiler[I4],implicitevidence$324:kantan.xpath.Compiler[I5],implicitevidence$325:kantan.xpath.Compiler[I6],implicitevidence$326:kantan.xpath.Compiler[I7],implicitevidence$327:kantan.xpath.Compiler[I8],implicitevidence$328:kantan.xpath.Compiler[I9],implicitevidence$329:kantan.xpath.Compiler[I10],implicitevidence$330:kantan.xpath.Compiler[I11],implicitevidence$331:kantan.xpath.Compiler[I12]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression)(implicitevidence$309:kantan.xpath.Compiler[I1],implicitevidence$310:kantan.xpath.Compiler[I2],implicitevidence$311:kantan.xpath.Compiler[I3],implicitevidence$312:kantan.xpath.Compiler[I4],implicitevidence$313:kantan.xpath.Compiler[I5],implicitevidence$314:kantan.xpath.Compiler[I6],implicitevidence$315:kantan.xpath.Compiler[I7],implicitevidence$316:kantan.xpath.Compiler[I8],implicitevidence$317:kantan.xpath.Compiler[I9],implicitevidence$318:kantan.xpath.Compiler[I10],implicitevidence$319:kantan.xpath.Compiler[I11]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression)(implicitevidence$299:kantan.xpath.Compiler[I1],implicitevidence$300:kantan.xpath.Compiler[I2],implicitevidence$301:kantan.xpath.Compiler[I3],implicitevidence$302:kantan.xpath.Compiler[I4],implicitevidence$303:kantan.xpath.Compiler[I5],implicitevidence$304:kantan.xpath.Compiler[I6],implicitevidence$305:kantan.xpath.Compiler[I7],implicitevidence$306:kantan.xpath.Compiler[I8],implicitevidence$307:kantan.xpath.Compiler[I9],implicitevidence$308:kantan.xpath.Compiler[I10]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression)(implicitevidence$290:kantan.xpath.Compiler[I1],implicitevidence$291:kantan.xpath.Compiler[I2],implicitevidence$292:kantan.xpath.Compiler[I3],implicitevidence$293:kantan.xpath.Compiler[I4],implicitevidence$294:kantan.xpath.Compiler[I5],implicitevidence$295:kantan.xpath.Compiler[I6],implicitevidence$296:kantan.xpath.Compiler[I7],implicitevidence$297:kantan.xpath.Compiler[I8],implicitevidence$298:kantan.xpath.Compiler[I9]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression)(implicitevidence$282:kantan.xpath.Compiler[I1],implicitevidence$283:kantan.xpath.Compiler[I2],implicitevidence$284:kantan.xpath.Compiler[I3],implicitevidence$285:kantan.xpath.Compiler[I4],implicitevidence$286:kantan.xpath.Compiler[I5],implicitevidence$287:kantan.xpath.Compiler[I6],implicitevidence$288:kantan.xpath.Compiler[I7],implicitevidence$289:kantan.xpath.Compiler[I8]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression)(implicitevidence$275:kantan.xpath.Compiler[I1],implicitevidence$276:kantan.xpath.Compiler[I2],implicitevidence$277:kantan.xpath.Compiler[I3],implicitevidence$278:kantan.xpath.Compiler[I4],implicitevidence$279:kantan.xpath.Compiler[I5],implicitevidence$280:kantan.xpath.Compiler[I6],implicitevidence$281:kantan.xpath.Compiler[I7]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6]): NodeDecoder[(I1, I2, I3, I4, I5, I6)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression)(implicitevidence$269:kantan.xpath.Compiler[I1],implicitevidence$270:kantan.xpath.Compiler[I2],implicitevidence$271:kantan.xpath.Compiler[I3],implicitevidence$272:kantan.xpath.Compiler[I4],implicitevidence$273:kantan.xpath.Compiler[I5],implicitevidence$274:kantan.xpath.Compiler[I6]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5]): NodeDecoder[(I1, I2, I3, I4, I5)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression)(implicitevidence$264:kantan.xpath.Compiler[I1],implicitevidence$265:kantan.xpath.Compiler[I2],implicitevidence$266:kantan.xpath.Compiler[I3],implicitevidence$267:kantan.xpath.Compiler[I4],implicitevidence$268:kantan.xpath.Compiler[I5]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4]): NodeDecoder[(I1, I2, I3, I4)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression)(implicitevidence$260:kantan.xpath.Compiler[I1],implicitevidence$261:kantan.xpath.Compiler[I2],implicitevidence$262:kantan.xpath.Compiler[I3],implicitevidence$263:kantan.xpath.Compiler[I4]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3]): NodeDecoder[(I1, I2, I3)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression)(implicitevidence$257:kantan.xpath.Compiler[I1],implicitevidence$258:kantan.xpath.Compiler[I2],implicitevidence$259:kantan.xpath.Compiler[I3]):kantan.xpath.NodeDecoder[(I1,I2,I3)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression, x2: XPathExpression)(arg0: Compiler[I1], arg1: Compiler[I2]): NodeDecoder[(I1, I2)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression)(implicitevidence$255:kantan.xpath.Compiler[I1],implicitevidence$256:kantan.xpath.Compiler[I2]):kantan.xpath.NodeDecoder[(I1,I2)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: XPathExpression)(arg0: Compiler[I1]): NodeDecoder[(I1)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1](x1:kantan.xpath.XPathExpression)(implicitevidence$254:kantan.xpath.Compiler[I1]):kantan.xpath.NodeDecoder[(I1,)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]], x21: Query[DecodeResult[I21]], x22: Query[DecodeResult[I22]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]],x21:kantan.xpath.Query[kantan.xpath.DecodeResult[I21]],x22:kantan.xpath.Query[kantan.xpath.DecodeResult[I22]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]], x21: Query[DecodeResult[I21]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]],x21:kantan.xpath.Query[kantan.xpath.DecodeResult[I21]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8,I9](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7, I8)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7,I8](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7,I8)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]]): NodeDecoder[(I1, I2, I3, I4, I5, I6, I7)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6,I7](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6,I7)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]]): NodeDecoder[(I1, I2, I3, I4, I5, I6)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5,I6](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5,I6)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]]): NodeDecoder[(I1, I2, I3, I4, I5)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4,I5](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4,I5)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]]): NodeDecoder[(I1, I2, I3, I4)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3,I4](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]]):kantan.xpath.NodeDecoder[(I1,I2,I3,I4)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]]): NodeDecoder[(I1, I2, I3)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2,I3](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]]):kantan.xpath.NodeDecoder[(I1,I2,I3)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]]): NodeDecoder[(I1, I2)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1,I2](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]]):kantan.xpath.NodeDecoder[(I1,I2)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(x1: Query[DecodeResult[I1]]): NodeDecoder[(I1)]", "member" : "kantan.xpath.GeneratedDecoders.tuple", "link" : "kantan\/xpath\/NodeDecoder$.html#tuple[I1](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]]):kantan.xpath.NodeDecoder[(I1,)]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression, x21: XPathExpression, x22: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20], arg20: Compiler[I21], arg21: Compiler[I22]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression,x21:kantan.xpath.XPathExpression,x22:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)=>O)(implicitevidence$232:kantan.xpath.Compiler[I1],implicitevidence$233:kantan.xpath.Compiler[I2],implicitevidence$234:kantan.xpath.Compiler[I3],implicitevidence$235:kantan.xpath.Compiler[I4],implicitevidence$236:kantan.xpath.Compiler[I5],implicitevidence$237:kantan.xpath.Compiler[I6],implicitevidence$238:kantan.xpath.Compiler[I7],implicitevidence$239:kantan.xpath.Compiler[I8],implicitevidence$240:kantan.xpath.Compiler[I9],implicitevidence$241:kantan.xpath.Compiler[I10],implicitevidence$242:kantan.xpath.Compiler[I11],implicitevidence$243:kantan.xpath.Compiler[I12],implicitevidence$244:kantan.xpath.Compiler[I13],implicitevidence$245:kantan.xpath.Compiler[I14],implicitevidence$246:kantan.xpath.Compiler[I15],implicitevidence$247:kantan.xpath.Compiler[I16],implicitevidence$248:kantan.xpath.Compiler[I17],implicitevidence$249:kantan.xpath.Compiler[I18],implicitevidence$250:kantan.xpath.Compiler[I19],implicitevidence$251:kantan.xpath.Compiler[I20],implicitevidence$252:kantan.xpath.Compiler[I21],implicitevidence$253:kantan.xpath.Compiler[I22]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression, x21: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20], arg20: Compiler[I21]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression,x21:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)=>O)(implicitevidence$211:kantan.xpath.Compiler[I1],implicitevidence$212:kantan.xpath.Compiler[I2],implicitevidence$213:kantan.xpath.Compiler[I3],implicitevidence$214:kantan.xpath.Compiler[I4],implicitevidence$215:kantan.xpath.Compiler[I5],implicitevidence$216:kantan.xpath.Compiler[I6],implicitevidence$217:kantan.xpath.Compiler[I7],implicitevidence$218:kantan.xpath.Compiler[I8],implicitevidence$219:kantan.xpath.Compiler[I9],implicitevidence$220:kantan.xpath.Compiler[I10],implicitevidence$221:kantan.xpath.Compiler[I11],implicitevidence$222:kantan.xpath.Compiler[I12],implicitevidence$223:kantan.xpath.Compiler[I13],implicitevidence$224:kantan.xpath.Compiler[I14],implicitevidence$225:kantan.xpath.Compiler[I15],implicitevidence$226:kantan.xpath.Compiler[I16],implicitevidence$227:kantan.xpath.Compiler[I17],implicitevidence$228:kantan.xpath.Compiler[I18],implicitevidence$229:kantan.xpath.Compiler[I19],implicitevidence$230:kantan.xpath.Compiler[I20],implicitevidence$231:kantan.xpath.Compiler[I21]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression, x20: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19], arg19: Compiler[I20]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression,x20:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)=>O)(implicitevidence$191:kantan.xpath.Compiler[I1],implicitevidence$192:kantan.xpath.Compiler[I2],implicitevidence$193:kantan.xpath.Compiler[I3],implicitevidence$194:kantan.xpath.Compiler[I4],implicitevidence$195:kantan.xpath.Compiler[I5],implicitevidence$196:kantan.xpath.Compiler[I6],implicitevidence$197:kantan.xpath.Compiler[I7],implicitevidence$198:kantan.xpath.Compiler[I8],implicitevidence$199:kantan.xpath.Compiler[I9],implicitevidence$200:kantan.xpath.Compiler[I10],implicitevidence$201:kantan.xpath.Compiler[I11],implicitevidence$202:kantan.xpath.Compiler[I12],implicitevidence$203:kantan.xpath.Compiler[I13],implicitevidence$204:kantan.xpath.Compiler[I14],implicitevidence$205:kantan.xpath.Compiler[I15],implicitevidence$206:kantan.xpath.Compiler[I16],implicitevidence$207:kantan.xpath.Compiler[I17],implicitevidence$208:kantan.xpath.Compiler[I18],implicitevidence$209:kantan.xpath.Compiler[I19],implicitevidence$210:kantan.xpath.Compiler[I20]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression, x19: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18], arg18: Compiler[I19]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression,x19:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)=>O)(implicitevidence$172:kantan.xpath.Compiler[I1],implicitevidence$173:kantan.xpath.Compiler[I2],implicitevidence$174:kantan.xpath.Compiler[I3],implicitevidence$175:kantan.xpath.Compiler[I4],implicitevidence$176:kantan.xpath.Compiler[I5],implicitevidence$177:kantan.xpath.Compiler[I6],implicitevidence$178:kantan.xpath.Compiler[I7],implicitevidence$179:kantan.xpath.Compiler[I8],implicitevidence$180:kantan.xpath.Compiler[I9],implicitevidence$181:kantan.xpath.Compiler[I10],implicitevidence$182:kantan.xpath.Compiler[I11],implicitevidence$183:kantan.xpath.Compiler[I12],implicitevidence$184:kantan.xpath.Compiler[I13],implicitevidence$185:kantan.xpath.Compiler[I14],implicitevidence$186:kantan.xpath.Compiler[I15],implicitevidence$187:kantan.xpath.Compiler[I16],implicitevidence$188:kantan.xpath.Compiler[I17],implicitevidence$189:kantan.xpath.Compiler[I18],implicitevidence$190:kantan.xpath.Compiler[I19]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression, x18: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17], arg17: Compiler[I18]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression,x18:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)=>O)(implicitevidence$154:kantan.xpath.Compiler[I1],implicitevidence$155:kantan.xpath.Compiler[I2],implicitevidence$156:kantan.xpath.Compiler[I3],implicitevidence$157:kantan.xpath.Compiler[I4],implicitevidence$158:kantan.xpath.Compiler[I5],implicitevidence$159:kantan.xpath.Compiler[I6],implicitevidence$160:kantan.xpath.Compiler[I7],implicitevidence$161:kantan.xpath.Compiler[I8],implicitevidence$162:kantan.xpath.Compiler[I9],implicitevidence$163:kantan.xpath.Compiler[I10],implicitevidence$164:kantan.xpath.Compiler[I11],implicitevidence$165:kantan.xpath.Compiler[I12],implicitevidence$166:kantan.xpath.Compiler[I13],implicitevidence$167:kantan.xpath.Compiler[I14],implicitevidence$168:kantan.xpath.Compiler[I15],implicitevidence$169:kantan.xpath.Compiler[I16],implicitevidence$170:kantan.xpath.Compiler[I17],implicitevidence$171:kantan.xpath.Compiler[I18]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression, x17: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16], arg16: Compiler[I17]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression,x17:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)=>O)(implicitevidence$137:kantan.xpath.Compiler[I1],implicitevidence$138:kantan.xpath.Compiler[I2],implicitevidence$139:kantan.xpath.Compiler[I3],implicitevidence$140:kantan.xpath.Compiler[I4],implicitevidence$141:kantan.xpath.Compiler[I5],implicitevidence$142:kantan.xpath.Compiler[I6],implicitevidence$143:kantan.xpath.Compiler[I7],implicitevidence$144:kantan.xpath.Compiler[I8],implicitevidence$145:kantan.xpath.Compiler[I9],implicitevidence$146:kantan.xpath.Compiler[I10],implicitevidence$147:kantan.xpath.Compiler[I11],implicitevidence$148:kantan.xpath.Compiler[I12],implicitevidence$149:kantan.xpath.Compiler[I13],implicitevidence$150:kantan.xpath.Compiler[I14],implicitevidence$151:kantan.xpath.Compiler[I15],implicitevidence$152:kantan.xpath.Compiler[I16],implicitevidence$153:kantan.xpath.Compiler[I17]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression, x16: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15], arg15: Compiler[I16]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression,x16:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)=>O)(implicitevidence$121:kantan.xpath.Compiler[I1],implicitevidence$122:kantan.xpath.Compiler[I2],implicitevidence$123:kantan.xpath.Compiler[I3],implicitevidence$124:kantan.xpath.Compiler[I4],implicitevidence$125:kantan.xpath.Compiler[I5],implicitevidence$126:kantan.xpath.Compiler[I6],implicitevidence$127:kantan.xpath.Compiler[I7],implicitevidence$128:kantan.xpath.Compiler[I8],implicitevidence$129:kantan.xpath.Compiler[I9],implicitevidence$130:kantan.xpath.Compiler[I10],implicitevidence$131:kantan.xpath.Compiler[I11],implicitevidence$132:kantan.xpath.Compiler[I12],implicitevidence$133:kantan.xpath.Compiler[I13],implicitevidence$134:kantan.xpath.Compiler[I14],implicitevidence$135:kantan.xpath.Compiler[I15],implicitevidence$136:kantan.xpath.Compiler[I16]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression, x15: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14], arg14: Compiler[I15]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression,x15:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)=>O)(implicitevidence$106:kantan.xpath.Compiler[I1],implicitevidence$107:kantan.xpath.Compiler[I2],implicitevidence$108:kantan.xpath.Compiler[I3],implicitevidence$109:kantan.xpath.Compiler[I4],implicitevidence$110:kantan.xpath.Compiler[I5],implicitevidence$111:kantan.xpath.Compiler[I6],implicitevidence$112:kantan.xpath.Compiler[I7],implicitevidence$113:kantan.xpath.Compiler[I8],implicitevidence$114:kantan.xpath.Compiler[I9],implicitevidence$115:kantan.xpath.Compiler[I10],implicitevidence$116:kantan.xpath.Compiler[I11],implicitevidence$117:kantan.xpath.Compiler[I12],implicitevidence$118:kantan.xpath.Compiler[I13],implicitevidence$119:kantan.xpath.Compiler[I14],implicitevidence$120:kantan.xpath.Compiler[I15]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression, x14: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13], arg13: Compiler[I14]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression,x14:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)=>O)(implicitevidence$92:kantan.xpath.Compiler[I1],implicitevidence$93:kantan.xpath.Compiler[I2],implicitevidence$94:kantan.xpath.Compiler[I3],implicitevidence$95:kantan.xpath.Compiler[I4],implicitevidence$96:kantan.xpath.Compiler[I5],implicitevidence$97:kantan.xpath.Compiler[I6],implicitevidence$98:kantan.xpath.Compiler[I7],implicitevidence$99:kantan.xpath.Compiler[I8],implicitevidence$100:kantan.xpath.Compiler[I9],implicitevidence$101:kantan.xpath.Compiler[I10],implicitevidence$102:kantan.xpath.Compiler[I11],implicitevidence$103:kantan.xpath.Compiler[I12],implicitevidence$104:kantan.xpath.Compiler[I13],implicitevidence$105:kantan.xpath.Compiler[I14]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression, x13: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12], arg12: Compiler[I13]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression,x13:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)=>O)(implicitevidence$79:kantan.xpath.Compiler[I1],implicitevidence$80:kantan.xpath.Compiler[I2],implicitevidence$81:kantan.xpath.Compiler[I3],implicitevidence$82:kantan.xpath.Compiler[I4],implicitevidence$83:kantan.xpath.Compiler[I5],implicitevidence$84:kantan.xpath.Compiler[I6],implicitevidence$85:kantan.xpath.Compiler[I7],implicitevidence$86:kantan.xpath.Compiler[I8],implicitevidence$87:kantan.xpath.Compiler[I9],implicitevidence$88:kantan.xpath.Compiler[I10],implicitevidence$89:kantan.xpath.Compiler[I11],implicitevidence$90:kantan.xpath.Compiler[I12],implicitevidence$91:kantan.xpath.Compiler[I13]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression, x12: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11], arg11: Compiler[I12]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression,x12:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)=>O)(implicitevidence$67:kantan.xpath.Compiler[I1],implicitevidence$68:kantan.xpath.Compiler[I2],implicitevidence$69:kantan.xpath.Compiler[I3],implicitevidence$70:kantan.xpath.Compiler[I4],implicitevidence$71:kantan.xpath.Compiler[I5],implicitevidence$72:kantan.xpath.Compiler[I6],implicitevidence$73:kantan.xpath.Compiler[I7],implicitevidence$74:kantan.xpath.Compiler[I8],implicitevidence$75:kantan.xpath.Compiler[I9],implicitevidence$76:kantan.xpath.Compiler[I10],implicitevidence$77:kantan.xpath.Compiler[I11],implicitevidence$78:kantan.xpath.Compiler[I12]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression, x11: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10], arg10: Compiler[I11]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression,x11:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)=>O)(implicitevidence$56:kantan.xpath.Compiler[I1],implicitevidence$57:kantan.xpath.Compiler[I2],implicitevidence$58:kantan.xpath.Compiler[I3],implicitevidence$59:kantan.xpath.Compiler[I4],implicitevidence$60:kantan.xpath.Compiler[I5],implicitevidence$61:kantan.xpath.Compiler[I6],implicitevidence$62:kantan.xpath.Compiler[I7],implicitevidence$63:kantan.xpath.Compiler[I8],implicitevidence$64:kantan.xpath.Compiler[I9],implicitevidence$65:kantan.xpath.Compiler[I10],implicitevidence$66:kantan.xpath.Compiler[I11]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression, x10: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9], arg9: Compiler[I10]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression,x10:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)=>O)(implicitevidence$46:kantan.xpath.Compiler[I1],implicitevidence$47:kantan.xpath.Compiler[I2],implicitevidence$48:kantan.xpath.Compiler[I3],implicitevidence$49:kantan.xpath.Compiler[I4],implicitevidence$50:kantan.xpath.Compiler[I5],implicitevidence$51:kantan.xpath.Compiler[I6],implicitevidence$52:kantan.xpath.Compiler[I7],implicitevidence$53:kantan.xpath.Compiler[I8],implicitevidence$54:kantan.xpath.Compiler[I9],implicitevidence$55:kantan.xpath.Compiler[I10]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression, x9: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8], arg8: Compiler[I9]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression,x9:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9)=>O)(implicitevidence$37:kantan.xpath.Compiler[I1],implicitevidence$38:kantan.xpath.Compiler[I2],implicitevidence$39:kantan.xpath.Compiler[I3],implicitevidence$40:kantan.xpath.Compiler[I4],implicitevidence$41:kantan.xpath.Compiler[I5],implicitevidence$42:kantan.xpath.Compiler[I6],implicitevidence$43:kantan.xpath.Compiler[I7],implicitevidence$44:kantan.xpath.Compiler[I8],implicitevidence$45:kantan.xpath.Compiler[I9]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression, x8: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7, I8) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7], arg7: Compiler[I8]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression,x8:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7,I8)=>O)(implicitevidence$29:kantan.xpath.Compiler[I1],implicitevidence$30:kantan.xpath.Compiler[I2],implicitevidence$31:kantan.xpath.Compiler[I3],implicitevidence$32:kantan.xpath.Compiler[I4],implicitevidence$33:kantan.xpath.Compiler[I5],implicitevidence$34:kantan.xpath.Compiler[I6],implicitevidence$35:kantan.xpath.Compiler[I7],implicitevidence$36:kantan.xpath.Compiler[I8]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression, x7: XPathExpression)(f: (I1, I2, I3, I4, I5, I6, I7) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6], arg6: Compiler[I7]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression,x7:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6,I7)=>O)(implicitevidence$22:kantan.xpath.Compiler[I1],implicitevidence$23:kantan.xpath.Compiler[I2],implicitevidence$24:kantan.xpath.Compiler[I3],implicitevidence$25:kantan.xpath.Compiler[I4],implicitevidence$26:kantan.xpath.Compiler[I5],implicitevidence$27:kantan.xpath.Compiler[I6],implicitevidence$28:kantan.xpath.Compiler[I7]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression, x6: XPathExpression)(f: (I1, I2, I3, I4, I5, I6) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5], arg5: Compiler[I6]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression,x6:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5,I6)=>O)(implicitevidence$16:kantan.xpath.Compiler[I1],implicitevidence$17:kantan.xpath.Compiler[I2],implicitevidence$18:kantan.xpath.Compiler[I3],implicitevidence$19:kantan.xpath.Compiler[I4],implicitevidence$20:kantan.xpath.Compiler[I5],implicitevidence$21:kantan.xpath.Compiler[I6]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression, x5: XPathExpression)(f: (I1, I2, I3, I4, I5) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4], arg4: Compiler[I5]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression,x5:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4,I5)=>O)(implicitevidence$11:kantan.xpath.Compiler[I1],implicitevidence$12:kantan.xpath.Compiler[I2],implicitevidence$13:kantan.xpath.Compiler[I3],implicitevidence$14:kantan.xpath.Compiler[I4],implicitevidence$15:kantan.xpath.Compiler[I5]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression, x4: XPathExpression)(f: (I1, I2, I3, I4) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3], arg3: Compiler[I4]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression,x4:kantan.xpath.XPathExpression)(f:(I1,I2,I3,I4)=>O)(implicitevidence$7:kantan.xpath.Compiler[I1],implicitevidence$8:kantan.xpath.Compiler[I2],implicitevidence$9:kantan.xpath.Compiler[I3],implicitevidence$10:kantan.xpath.Compiler[I4]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression, x3: XPathExpression)(f: (I1, I2, I3) => O)(arg0: Compiler[I1], arg1: Compiler[I2], arg2: Compiler[I3]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression,x3:kantan.xpath.XPathExpression)(f:(I1,I2,I3)=>O)(implicitevidence$4:kantan.xpath.Compiler[I1],implicitevidence$5:kantan.xpath.Compiler[I2],implicitevidence$6:kantan.xpath.Compiler[I3]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression, x2: XPathExpression)(f: (I1, I2) => O)(arg0: Compiler[I1], arg1: Compiler[I2]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,O](x1:kantan.xpath.XPathExpression,x2:kantan.xpath.XPathExpression)(f:(I1,I2)=>O)(implicitevidence$2:kantan.xpath.Compiler[I1],implicitevidence$3:kantan.xpath.Compiler[I2]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: XPathExpression)(f: (I1) => O)(arg0: Compiler[I1]): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,O](x1:kantan.xpath.XPathExpression)(f:I1=>O)(implicitevidence$1:kantan.xpath.Compiler[I1]):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]], x21: Query[DecodeResult[I21]], x22: Query[DecodeResult[I22]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]],x21:kantan.xpath.Query[kantan.xpath.DecodeResult[I21]],x22:kantan.xpath.Query[kantan.xpath.DecodeResult[I22]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]], x21: Query[DecodeResult[I21]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]],x21:kantan.xpath.Query[kantan.xpath.DecodeResult[I21]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]], x20: Query[DecodeResult[I20]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]],x20:kantan.xpath.Query[kantan.xpath.DecodeResult[I20]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]], x19: Query[DecodeResult[I19]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]],x19:kantan.xpath.Query[kantan.xpath.DecodeResult[I19]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]], x18: Query[DecodeResult[I18]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]],x18:kantan.xpath.Query[kantan.xpath.DecodeResult[I18]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]], x17: Query[DecodeResult[I17]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]],x17:kantan.xpath.Query[kantan.xpath.DecodeResult[I17]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]], x16: Query[DecodeResult[I16]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]],x16:kantan.xpath.Query[kantan.xpath.DecodeResult[I16]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]], x15: Query[DecodeResult[I15]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]],x15:kantan.xpath.Query[kantan.xpath.DecodeResult[I15]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]], x14: Query[DecodeResult[I14]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]],x14:kantan.xpath.Query[kantan.xpath.DecodeResult[I14]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]], x13: Query[DecodeResult[I13]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]],x13:kantan.xpath.Query[kantan.xpath.DecodeResult[I13]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]], x12: Query[DecodeResult[I12]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]],x12:kantan.xpath.Query[kantan.xpath.DecodeResult[I12]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]], x11: Query[DecodeResult[I11]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]],x11:kantan.xpath.Query[kantan.xpath.DecodeResult[I11]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]], x10: Query[DecodeResult[I10]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]],x10:kantan.xpath.Query[kantan.xpath.DecodeResult[I10]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]], x9: Query[DecodeResult[I9]])(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,I9,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]],x9:kantan.xpath.Query[kantan.xpath.DecodeResult[I9]])(f:(I1,I2,I3,I4,I5,I6,I7,I8,I9)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]], x8: Query[DecodeResult[I8]])(f: (I1, I2, I3, I4, I5, I6, I7, I8) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,I8,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]],x8:kantan.xpath.Query[kantan.xpath.DecodeResult[I8]])(f:(I1,I2,I3,I4,I5,I6,I7,I8)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]], x7: Query[DecodeResult[I7]])(f: (I1, I2, I3, I4, I5, I6, I7) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,I7,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]],x7:kantan.xpath.Query[kantan.xpath.DecodeResult[I7]])(f:(I1,I2,I3,I4,I5,I6,I7)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]], x6: Query[DecodeResult[I6]])(f: (I1, I2, I3, I4, I5, I6) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,I6,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]],x6:kantan.xpath.Query[kantan.xpath.DecodeResult[I6]])(f:(I1,I2,I3,I4,I5,I6)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]], x5: Query[DecodeResult[I5]])(f: (I1, I2, I3, I4, I5) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,I5,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]],x5:kantan.xpath.Query[kantan.xpath.DecodeResult[I5]])(f:(I1,I2,I3,I4,I5)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]], x4: Query[DecodeResult[I4]])(f: (I1, I2, I3, I4) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,I4,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]],x4:kantan.xpath.Query[kantan.xpath.DecodeResult[I4]])(f:(I1,I2,I3,I4)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]], x3: Query[DecodeResult[I3]])(f: (I1, I2, I3) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,I3,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]],x3:kantan.xpath.Query[kantan.xpath.DecodeResult[I3]])(f:(I1,I2,I3)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]], x2: Query[DecodeResult[I2]])(f: (I1, I2) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,I2,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]],x2:kantan.xpath.Query[kantan.xpath.DecodeResult[I2]])(f:(I1,I2)=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(x1: Query[DecodeResult[I1]])(f: (I1) => O): NodeDecoder[O]", "member" : "kantan.xpath.GeneratedDecoders.decoder", "link" : "kantan\/xpath\/NodeDecoder$.html#decoder[I1,O](x1:kantan.xpath.Query[kantan.xpath.DecodeResult[I1]])(f:I1=>O):kantan.xpath.NodeDecoder[O]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/NodeDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/NodeDecoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/NodeDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/NodeDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/NodeDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/NodeDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/NodeDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/NodeDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/NodeDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/NodeDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/NodeDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/NodeDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/NodeDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/NodeDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/NodeDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/NodeDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/NodeDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/NodeDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/NodeDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "product", "tail" : "(decoder: Decoder[E, DD, F, T]): Decoder[E, (D, DD), F, T]", "member" : "kantan.codecs.Decoder.product", "link" : "kantan\/xpath\/package$$NodeDecoder.html#product[DD](decoder:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,(D,DD),F,T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (D) => Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.flatMap", "link" : "kantan\/xpath\/package$$NodeDecoder.html#flatMap[DD](f:D=>kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "tag", "tail" : "(): Decoder[E, D, F, TT]", "member" : "kantan.codecs.Decoder.tag", "link" : "kantan\/xpath\/package$$NodeDecoder.html#tag[TT]:kantan.codecs.Decoder[E,D,F,TT]", "kind" : "def"}, {"label" : "contramapEncoded", "tail" : "(f: (EE) => E): Decoder[EE, D, F, T]", "member" : "kantan.codecs.Decoder.contramapEncoded", "link" : "kantan\/xpath\/package$$NodeDecoder.html#contramapEncoded[EE](f:EE=>E):kantan.codecs.Decoder[EE,D,F,T]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.leftMap", "link" : "kantan\/xpath\/package$$NodeDecoder.html#leftMap[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.mapError", "link" : "kantan\/xpath\/package$$NodeDecoder.html#mapError[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (D) => Boolean)(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.filter", "link" : "kantan\/xpath\/package$$NodeDecoder.html#filter(f:D=>Boolean)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[D, DD])(t: IsError[F]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.collect", "link" : "kantan\/xpath\/package$$NodeDecoder.html#collect[DD](f:PartialFunction[D,DD])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.emap", "link" : "kantan\/xpath\/package$$NodeDecoder.html#emap[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.mapResult", "link" : "kantan\/xpath\/package$$NodeDecoder.html#mapResult[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (D) => DD): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.map", "link" : "kantan\/xpath\/package$$NodeDecoder.html#map[DD](f:D=>DD):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (F) => Decoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.handleErrorWith", "link" : "kantan\/xpath\/package$$NodeDecoder.html#handleErrorWith(f:F=>kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[F, Either[FF, DD]]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.recoverWith", "link" : "kantan\/xpath\/package$$NodeDecoder.html#recoverWith[DD>:D,FF>:F](pf:PartialFunction[F,Either[FF,DD]]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.recover", "link" : "kantan\/xpath\/package$$NodeDecoder.html#recover[DD>:D](pf:PartialFunction[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: (Either[F, D]) => Either[FF, DD]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.andThen", "link" : "kantan\/xpath\/package$$NodeDecoder.html#andThen[FF,DD](f:Either[F,D]=>Either[FF,DD]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(d: Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.orElse", "link" : "kantan\/xpath\/package$$NodeDecoder.html#orElse[DD>:D](d:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "unsafeDecode", "tail" : "(e: E): D", "member" : "kantan.codecs.Decoder.unsafeDecode", "link" : "kantan\/xpath\/package$$NodeDecoder.html#unsafeDecode(e:E):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/package$$NodeDecoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/package$$NodeDecoder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/package$$NodeDecoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/package$$NodeDecoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/package$$NodeDecoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/package$$NodeDecoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/package$$NodeDecoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$NodeDecoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$NodeDecoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$NodeDecoder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/package$$NodeDecoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/package$$NodeDecoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/package$$NodeDecoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/package$$NodeDecoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/package$$NodeDecoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/package$$NodeDecoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/package$$NodeDecoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/package$$NodeDecoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/package$$NodeDecoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(e: E): Either[F, D]", "member" : "kantan.codecs.Decoder.decode", "link" : "kantan\/xpath\/package$$NodeDecoder.html#decode(e:E):Either[F,D]", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/xpath\/package$$NodeDecoder.html"}, {"name" : "kantan.xpath.NodeDecoderInstances", "trait" : "kantan\/xpath\/NodeDecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "eitherNodeDecoder", "tail" : "(arg0: NodeDecoder[A], arg1: NodeDecoder[B]): NodeDecoder[Either[A, B]]", "member" : "kantan.xpath.NodeDecoderInstances.eitherNodeDecoder", "link" : "kantan\/xpath\/NodeDecoderInstances.html#eitherNodeDecoder[A,B](implicitevidence$3:kantan.xpath.NodeDecoder[A],implicitevidence$4:kantan.xpath.NodeDecoder[B]):kantan.xpath.NodeDecoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "optionNodeDecoder", "tail" : "(arg0: NodeDecoder[A]): NodeDecoder[Option[A]]", "member" : "kantan.xpath.NodeDecoderInstances.optionNodeDecoder", "link" : "kantan\/xpath\/NodeDecoderInstances.html#optionNodeDecoder[A](implicitevidence$2:kantan.xpath.NodeDecoder[A]):kantan.xpath.NodeDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "fromString", "tail" : "(arg0: StringDecoder[A]): NodeDecoder[A]", "member" : "kantan.xpath.NodeDecoderInstances.fromString", "link" : "kantan\/xpath\/NodeDecoderInstances.html#fromString[A](implicitevidence$1:kantan.codecs.strings.StringDecoder[A]):kantan.xpath.NodeDecoder[A]", "kind" : "implicit def"}, {"label" : "attr", "tail" : ": NodeDecoder[Attr]", "member" : "kantan.xpath.NodeDecoderInstances.attr", "link" : "kantan\/xpath\/NodeDecoderInstances.html#attr:kantan.xpath.NodeDecoder[kantan.xpath.Attr]", "kind" : "implicit val"}, {"label" : "element", "tail" : ": NodeDecoder[Element]", "member" : "kantan.xpath.NodeDecoderInstances.element", "link" : "kantan\/xpath\/NodeDecoderInstances.html#element:kantan.xpath.NodeDecoder[kantan.xpath.Element]", "kind" : "implicit val"}, {"label" : "node", "tail" : ": NodeDecoder[Node]", "member" : "kantan.xpath.NodeDecoderInstances.node", "link" : "kantan\/xpath\/NodeDecoderInstances.html#node:kantan.xpath.NodeDecoder[kantan.xpath.Node]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/NodeDecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/NodeDecoderInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/NodeDecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/NodeDecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/NodeDecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/NodeDecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/NodeDecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/NodeDecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/NodeDecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/NodeDecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/NodeDecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/NodeDecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/NodeDecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/NodeDecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/NodeDecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/NodeDecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/NodeDecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/NodeDecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/NodeDecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides default NodeDecoder instances."}, {"name" : "kantan.xpath.ParseError", "shortDescription" : "Describes errors that occur while parsing XML content.", "object" : "kantan\/xpath\/ParseError$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/xpath\/ParseError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/ParseError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/xpath\/ParseError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/xpath\/ParseError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/xpath\/ParseError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/xpath\/ParseError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/xpath\/ParseError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/xpath\/ParseError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/xpath\/ParseError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/xpath\/ParseError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/ParseError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/ParseError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/ParseError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/xpath\/ParseError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/xpath\/ParseError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/xpath\/ParseError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/xpath\/ParseError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ParseError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ParseError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ParseError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ParseError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ParseError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ParseError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ParseError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ParseError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ParseError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ParseError.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ParseError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ParseError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ParseError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ParseError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ParseError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ParseError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ParseError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ParseError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/xpath\/ParseError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/xpath\/ParseError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/xpath\/ParseError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "IOError", "tail" : "", "member" : "kantan.xpath.ParseError.IOError", "link" : "kantan\/xpath\/ParseError$.html#IOError", "kind" : "object"}, {"label" : "IOError", "tail" : "", "member" : "kantan.xpath.ParseError.IOError", "link" : "kantan\/xpath\/ParseError$.html#IOErrorextendsParseErrorwithProductwithSerializable", "kind" : "sealed case class"}, {"label" : "SyntaxError", "tail" : "", "member" : "kantan.xpath.ParseError.SyntaxError", "link" : "kantan\/xpath\/ParseError$.html#SyntaxError", "kind" : "object"}, {"label" : "SyntaxError", "tail" : "", "member" : "kantan.xpath.ParseError.SyntaxError", "link" : "kantan\/xpath\/ParseError$.html#SyntaxErrorextendsParseErrorwithProductwithSerializable", "kind" : "sealed case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ParseError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ParseError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ParseError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ParseError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ParseError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ParseError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ParseError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ParseError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ParseError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ParseError$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ParseError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ParseError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/ParseError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ParseError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ParseError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ParseError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ParseError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ParseError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ParseError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/xpath\/ParseError.html", "kind" : "class"}, {"name" : "kantan.xpath.ParseResult", "shortDescription" : "Provides instance creation methods for ParseResult.", "object" : "kantan\/xpath\/ParseResult$.html", "members_object" : [{"label" : "open", "tail" : "(a: => A)(parse: (A) => ParseResult[B]): ParseResult[B]", "member" : "kantan.xpath.ParseResult.open", "link" : "kantan\/xpath\/ParseResult$.html#open[A,B](a:=>A)(parse:A=>kantan.xpath.ParseResult[B]):kantan.xpath.ParseResult[B]", "kind" : "def"}, {"label" : "syntax", "tail" : "(a: => A): ParseResult[A]", "member" : "kantan.xpath.ParseResult.syntax", "link" : "kantan\/xpath\/ParseResult$.html#syntax[A](a:=>A):kantan.xpath.ParseResult[A]", "kind" : "def"}, {"label" : "io", "tail" : "(a: => A): ParseResult[A]", "member" : "kantan.xpath.ParseResult.io", "link" : "kantan\/xpath\/ParseResult$.html#io[A](a:=>A):kantan.xpath.ParseResult[A]", "kind" : "def"}, {"label" : "fromThrowable", "tail" : "(t: Throwable): SyntaxError", "member" : "kantan.xpath.ParseResult.fromThrowable", "link" : "kantan\/xpath\/ParseResult$.html#fromThrowable(t:Throwable):kantan.xpath.ParseError.SyntaxError", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Either[ParseError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/xpath\/ParseResult$.html#fromTry[S](t:scala.util.Try[S]):Either[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: => S): Either[ParseError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/xpath\/ParseResult$.html#apply[S](s:=>S):Either[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: ParseError): Either[ParseError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/xpath\/ParseResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[ParseError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/xpath\/ParseResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[ParseError, S]])(bf: BuildFrom[M[Either[ParseError, S]], S, M[S]]): Either[ParseError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/xpath\/ParseResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ParseResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ParseResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ParseResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ParseResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ParseResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ParseResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ParseResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ParseResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ParseResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ParseResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ParseResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ParseResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/ParseResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ParseResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ParseResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ParseResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ParseResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ParseResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ParseResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/xpath\/package$$ParseResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/xpath\/package$$ParseResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/xpath\/package$$ParseResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/xpath\/package$$ParseResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/xpath\/package$$ParseResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/xpath\/package$$ParseResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/xpath\/package$$ParseResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/xpath\/package$$ParseResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/xpath\/package$$ParseResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/xpath\/package$$ParseResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/xpath\/package$$ParseResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/xpath\/package$$ParseResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/xpath\/package$$ParseResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/xpath\/package$$ParseResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/xpath\/package$$ParseResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/xpath\/package$$ParseResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/xpath\/package$$ParseResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/xpath\/package$$ParseResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/xpath\/package$$ParseResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/package$$ParseResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/xpath\/package$$ParseResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/xpath\/package$$ParseResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/xpath\/package$$ParseResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/package$$ParseResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/package$$ParseResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/package$$ParseResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/package$$ParseResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/package$$ParseResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/package$$ParseResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/package$$ParseResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$ParseResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$ParseResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$ParseResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/package$$ParseResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/package$$ParseResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/package$$ParseResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/package$$ParseResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/package$$ParseResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/package$$ParseResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/package$$ParseResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/package$$ParseResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/package$$ParseResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/xpath\/package$$ParseResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/xpath\/package$$ParseResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/xpath\/package$$ParseResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/xpath\/package$$ParseResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/xpath\/package$$ParseResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/xpath\/package$$ParseResult.html"}, {"name" : "kantan.xpath.Query", "object" : "kantan\/xpath\/Query$.html", "members_object" : [{"label" : "unsafeCompile", "tail" : "(str: String)(arg0: Compiler[A], xpath: XPathCompiler): Query[DecodeResult[A]]", "member" : "kantan.xpath.Query.unsafeCompile", "link" : "kantan\/xpath\/Query$.html#unsafeCompile[A](str:String)(implicitevidence$3:kantan.xpath.Compiler[A],implicitxpath:kantan.xpath.XPathCompiler):kantan.xpath.Query[kantan.xpath.DecodeResult[A]]", "kind" : "def"}, {"label" : "compile", "tail" : "(str: String)(arg0: Compiler[A], xpath: XPathCompiler): CompileResult[Query[DecodeResult[A]]]", "member" : "kantan.xpath.Query.compile", "link" : "kantan\/xpath\/Query$.html#compile[A](str:String)(implicitevidence$2:kantan.xpath.Compiler[A],implicitxpath:kantan.xpath.XPathCompiler):kantan.xpath.CompileResult[kantan.xpath.Query[kantan.xpath.DecodeResult[A]]]", "kind" : "def"}, {"label" : "apply", "tail" : "(expr: XPathExpression)(arg0: Compiler[A]): Query[DecodeResult[A]]", "member" : "kantan.xpath.Query.apply", "link" : "kantan\/xpath\/Query$.html#apply[A](expr:kantan.xpath.XPathExpression)(implicitevidence$1:kantan.xpath.Compiler[A]):kantan.xpath.Query[kantan.xpath.DecodeResult[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: (Node) => A): Query[A]", "member" : "kantan.xpath.Query.apply", "link" : "kantan\/xpath\/Query$.html#apply[A](f:kantan.xpath.Node=>A):kantan.xpath.Query[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/Query$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/Query$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/Query$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/Query$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/Query$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/Query$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/Query$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Query$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Query$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Query$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/Query$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/Query$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/Query$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/Query$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/Query$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/Query$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/Query$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/Query$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/Query$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/xpath\/Query.html", "kind" : "trait", "members_trait" : [{"label" : "flatMap", "tail" : "(f: (A) => Query[B]): Query[B]", "member" : "kantan.xpath.Query.flatMap", "link" : "kantan\/xpath\/Query.html#flatMap[B](f:A=>kantan.xpath.Query[B]):kantan.xpath.Query[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Query[B]", "member" : "kantan.xpath.Query.map", "link" : "kantan\/xpath\/Query.html#map[B](f:A=>B):kantan.xpath.Query[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/Query.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/Query.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/Query.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/Query.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/Query.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/Query.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/Query.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Query.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Query.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/Query.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/Query.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/Query.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/Query.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/Query.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/Query.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/Query.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/Query.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/Query.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/Query.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "eval", "tail" : "(n: Node): A", "member" : "kantan.xpath.Query.eval", "link" : "kantan\/xpath\/Query.html#eval(n:kantan.xpath.Node):A", "kind" : "abstract def"}], "shortDescription" : "Compiled XPath expression."}, {"name" : "kantan.xpath.ReadError", "shortDescription" : "Describes an error that occurred while parsing and \/ or decoding XML content.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/xpath\/ReadError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/ReadError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/xpath\/ReadError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/xpath\/ReadError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/xpath\/ReadError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/xpath\/ReadError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/xpath\/ReadError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/xpath\/ReadError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/xpath\/ReadError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/xpath\/ReadError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/ReadError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/ReadError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/ReadError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/xpath\/ReadError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/xpath\/ReadError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/xpath\/ReadError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/xpath\/ReadError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ReadError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ReadError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ReadError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ReadError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ReadError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ReadError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ReadError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ReadError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ReadError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ReadError.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ReadError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ReadError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ReadError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ReadError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ReadError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ReadError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ReadError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ReadError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/xpath\/ReadError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/xpath\/ReadError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/xpath\/ReadError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "class" : "kantan\/xpath\/ReadError.html", "kind" : "class"}, {"name" : "kantan.xpath.ReadResult", "shortDescription" : "", "object" : "kantan\/xpath\/ReadResult$.html", "members_object" : [{"label" : "failure", "tail" : "(f: ReadError): Either[ReadError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/xpath\/ReadResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[ReadError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/xpath\/ReadResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[ReadError, S]])(bf: BuildFrom[M[Either[ReadError, S]], S, M[S]]): Either[ReadError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/xpath\/ReadResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/ReadResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/ReadResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/ReadResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/ReadResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/ReadResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/ReadResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/ReadResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ReadResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ReadResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/ReadResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/ReadResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/ReadResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/ReadResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/ReadResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/ReadResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/ReadResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/ReadResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/ReadResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/ReadResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/xpath\/package$$ReadResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/xpath\/package$$ReadResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/xpath\/package$$ReadResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/xpath\/package$$ReadResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/xpath\/package$$ReadResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/xpath\/package$$ReadResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/xpath\/package$$ReadResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/xpath\/package$$ReadResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/xpath\/package$$ReadResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/xpath\/package$$ReadResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/xpath\/package$$ReadResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/xpath\/package$$ReadResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/xpath\/package$$ReadResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/xpath\/package$$ReadResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/xpath\/package$$ReadResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/xpath\/package$$ReadResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/xpath\/package$$ReadResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/xpath\/package$$ReadResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/xpath\/package$$ReadResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/package$$ReadResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/xpath\/package$$ReadResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/xpath\/package$$ReadResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/xpath\/package$$ReadResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/package$$ReadResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/package$$ReadResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/package$$ReadResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/package$$ReadResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/package$$ReadResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/package$$ReadResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/package$$ReadResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$ReadResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$ReadResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$ReadResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/package$$ReadResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/package$$ReadResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/package$$ReadResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/package$$ReadResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/package$$ReadResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/package$$ReadResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/package$$ReadResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/package$$ReadResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/package$$ReadResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/xpath\/package$$ReadResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/xpath\/package$$ReadResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/xpath\/package$$ReadResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/xpath\/package$$ReadResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/xpath\/package$$ReadResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/xpath\/package$$ReadResult.html"}, {"name" : "kantan.xpath.RemoteXmlSource", "shortDescription" : "XmlSource implementation anything that can be turned into a java.io.URL.", "members_case class" : [{"label" : "withRetry", "tail" : "(strategy: RetryStrategy): RemoteXmlSource[A]", "member" : "kantan.xpath.RemoteXmlSource.withRetry", "link" : "kantan\/xpath\/RemoteXmlSource.html#withRetry(strategy:kantan.xpath.RetryStrategy):kantan.xpath.RemoteXmlSource[A]", "kind" : "def"}, {"label" : "withUserAgent", "tail" : "(value: String): RemoteXmlSource[A]", "member" : "kantan.xpath.RemoteXmlSource.withUserAgent", "link" : "kantan\/xpath\/RemoteXmlSource.html#withUserAgent(value:String):kantan.xpath.RemoteXmlSource[A]", "kind" : "def"}, {"label" : "withHeader", "tail" : "(name: String, value: String): RemoteXmlSource[A]", "member" : "kantan.xpath.RemoteXmlSource.withHeader", "link" : "kantan\/xpath\/RemoteXmlSource.html#withHeader(name:String,value:String):kantan.xpath.RemoteXmlSource[A]", "kind" : "def"}, {"label" : "contramapResult", "tail" : "(f: (B) => ParseResult[AA]): RemoteXmlSource[B]", "member" : "kantan.xpath.RemoteXmlSource.contramapResult", "link" : "kantan\/xpath\/RemoteXmlSource.html#contramapResult[AA<:A,B](f:B=>kantan.xpath.ParseResult[AA]):kantan.xpath.RemoteXmlSource[B]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (B) => A): RemoteXmlSource[B]", "member" : "kantan.xpath.RemoteXmlSource.contramap", "link" : "kantan\/xpath\/RemoteXmlSource.html#contramap[B](f:B=>A):kantan.xpath.RemoteXmlSource[B]", "kind" : "def"}, {"label" : "asNode", "tail" : "(a: A): ParseResult[Node]", "member" : "kantan.xpath.RemoteXmlSource.asNode", "link" : "kantan\/xpath\/RemoteXmlSource.html#asNode(a:A):kantan.xpath.ParseResult[kantan.xpath.Node]", "kind" : "def"}, {"member" : "kantan.xpath.RemoteXmlSource#<init>", "error" : "unsupported entity"}, {"label" : "headers", "tail" : ": Map[String, String]", "member" : "kantan.xpath.RemoteXmlSource.headers", "link" : "kantan\/xpath\/RemoteXmlSource.html#headers:Map[String,String]", "kind" : "val"}, {"label" : "retry", "tail" : ": RetryStrategy", "member" : "kantan.xpath.RemoteXmlSource.retry", "link" : "kantan\/xpath\/RemoteXmlSource.html#retry:kantan.xpath.RetryStrategy", "kind" : "val"}, {"label" : "toURL", "tail" : ": (A) => ParseResult[URL]", "member" : "kantan.xpath.RemoteXmlSource.toURL", "link" : "kantan\/xpath\/RemoteXmlSource.html#toURL:A=>kantan.xpath.ParseResult[java.net.URL]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/RemoteXmlSource.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: A, expr: Query[DecodeResult[B]]): ReadResult[B]", "member" : "kantan.xpath.XmlSource.eval", "link" : "kantan\/xpath\/RemoteXmlSource.html#eval[B](a:A,expr:kantan.xpath.Query[kantan.xpath.DecodeResult[B]]):kantan.xpath.ReadResult[B]", "kind" : "def"}, {"label" : "unsafeEval", "tail" : "(a: A, expr: Query[DecodeResult[B]]): B", "member" : "kantan.xpath.XmlSource.unsafeEval", "link" : "kantan\/xpath\/RemoteXmlSource.html#unsafeEval[B](a:A,expr:kantan.xpath.Query[kantan.xpath.DecodeResult[B]]):B", "kind" : "def"}, {"label" : "eval", "tail" : "(a: A, expr: XPathExpression)(arg0: Compiler[B]): XPathResult[B]", "member" : "kantan.xpath.XmlSource.eval", "link" : "kantan\/xpath\/RemoteXmlSource.html#eval[B](a:A,expr:kantan.xpath.XPathExpression)(implicitevidence$2:kantan.xpath.Compiler[B]):kantan.xpath.XPathResult[B]", "kind" : "def"}, {"label" : "unsafeEval", "tail" : "(a: A, expr: XPathExpression)(arg0: Compiler[B]): B", "member" : "kantan.xpath.XmlSource.unsafeEval", "link" : "kantan\/xpath\/RemoteXmlSource.html#unsafeEval[B](a:A,expr:kantan.xpath.XPathExpression)(implicitevidence$1:kantan.xpath.Compiler[B]):B", "kind" : "def"}, {"label" : "asUnsafeNode", "tail" : "(a: A): Node", "member" : "kantan.xpath.XmlSource.asUnsafeNode", "link" : "kantan\/xpath\/RemoteXmlSource.html#asUnsafeNode(a:A):kantan.xpath.Node", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/RemoteXmlSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/RemoteXmlSource.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/RemoteXmlSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/RemoteXmlSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/RemoteXmlSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/RemoteXmlSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/RemoteXmlSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/RemoteXmlSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/RemoteXmlSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/RemoteXmlSource.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/RemoteXmlSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/RemoteXmlSource.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/RemoteXmlSource.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/RemoteXmlSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/RemoteXmlSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/RemoteXmlSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/xpath\/RemoteXmlSource.html", "kind" : "case class"}, {"name" : "kantan.xpath.RetryStrategy", "shortDescription" : "Describes how to retry failed request for RemoteXmlSource.", "object" : "kantan\/xpath\/RetryStrategy$.html", "members_object" : [{"label" : "quadratic", "tail" : "(count: Int, delay: Long): RetryStrategy", "member" : "kantan.xpath.RetryStrategy.quadratic", "link" : "kantan\/xpath\/RetryStrategy$.html#quadratic(count:Int,delay:Long):kantan.xpath.RetryStrategy", "kind" : "def"}, {"label" : "linear", "tail" : "(count: Int, delay: Long): RetryStrategy", "member" : "kantan.xpath.RetryStrategy.linear", "link" : "kantan\/xpath\/RetryStrategy$.html#linear(count:Int,delay:Long):kantan.xpath.RetryStrategy", "kind" : "def"}, {"label" : "fixed", "tail" : "(count: Int, delay: Long): RetryStrategy", "member" : "kantan.xpath.RetryStrategy.fixed", "link" : "kantan\/xpath\/RetryStrategy$.html#fixed(count:Int,delay:Long):kantan.xpath.RetryStrategy", "kind" : "def"}, {"label" : "none", "tail" : ": RetryStrategy", "member" : "kantan.xpath.RetryStrategy.none", "link" : "kantan\/xpath\/RetryStrategy$.html#none:kantan.xpath.RetryStrategy", "kind" : "val"}, {"label" : "noDelay", "tail" : "(count: Int): RetryStrategy", "member" : "kantan.xpath.RetryStrategy.noDelay", "link" : "kantan\/xpath\/RetryStrategy$.html#noDelay(count:Int):kantan.xpath.RetryStrategy", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/RetryStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/RetryStrategy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/RetryStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/RetryStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/RetryStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/RetryStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/RetryStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/RetryStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/RetryStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/RetryStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/RetryStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/RetryStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/RetryStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/RetryStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/RetryStrategy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/RetryStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/RetryStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/RetryStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/RetryStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "delayFor", "tail" : "(count: Int): Long", "member" : "kantan.xpath.RetryStrategy.delayFor", "link" : "kantan\/xpath\/RetryStrategy.html#delayFor(count:Int):Long", "kind" : "def"}, {"member" : "kantan.xpath.RetryStrategy#<init>", "error" : "unsupported entity"}, {"label" : "factor", "tail" : ": (Int) => Int", "member" : "kantan.xpath.RetryStrategy.factor", "link" : "kantan\/xpath\/RetryStrategy.html#factor:Int=>Int", "kind" : "val"}, {"label" : "delay", "tail" : ": Long", "member" : "kantan.xpath.RetryStrategy.delay", "link" : "kantan\/xpath\/RetryStrategy.html#delay:Long", "kind" : "val"}, {"label" : "max", "tail" : ": Int", "member" : "kantan.xpath.RetryStrategy.max", "link" : "kantan\/xpath\/RetryStrategy.html#max:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/RetryStrategy.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/RetryStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/RetryStrategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/RetryStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/RetryStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/RetryStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/RetryStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/RetryStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/RetryStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/RetryStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/RetryStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/RetryStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/RetryStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/RetryStrategy.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/RetryStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/RetryStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/RetryStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/xpath\/RetryStrategy.html", "kind" : "case class"}, {"name" : "kantan.xpath.XmlParser", "object" : "kantan\/xpath\/XmlParser$.html", "members_object" : [{"label" : "builtIn", "tail" : ": XmlParser", "member" : "kantan.xpath.XmlParser.builtIn", "link" : "kantan\/xpath\/XmlParser$.html#builtIn:kantan.xpath.XmlParser", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(f: (InputSource) => ParseResult[Node]): XmlParser", "member" : "kantan.xpath.XmlParser.apply", "link" : "kantan\/xpath\/XmlParser$.html#apply(f:kantan.xpath.InputSource=>kantan.xpath.ParseResult[kantan.xpath.Node]):kantan.xpath.XmlParser", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/XmlParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/XmlParser$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/XmlParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/XmlParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/XmlParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/XmlParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/XmlParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/XmlParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/XmlParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/XmlParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/XmlParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/XmlParser$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/XmlParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/XmlParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/XmlParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/XmlParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/xpath\/XmlParser.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/XmlParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/XmlParser.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/XmlParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/XmlParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/XmlParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/XmlParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/XmlParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlParser.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/XmlParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/XmlParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/XmlParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/XmlParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/XmlParser.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/XmlParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/XmlParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/XmlParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/XmlParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "parse", "tail" : "(source: InputSource): ParseResult[Node]", "member" : "kantan.xpath.XmlParser.parse", "link" : "kantan\/xpath\/XmlParser.html#parse(source:kantan.xpath.InputSource):kantan.xpath.ParseResult[kantan.xpath.Node]", "kind" : "abstract def"}], "shortDescription" : "Contract for anything that knows how to parse XML."}, {"name" : "kantan.xpath.XmlSource", "object" : "kantan\/xpath\/XmlSource$.html", "members_object" : [{"label" : "fromInputResource", "tail" : "(arg0: InputResource[A], parser: XmlParser): XmlSource[A]", "member" : "kantan.xpath.XmlSource.fromInputResource", "link" : "kantan\/xpath\/XmlSource$.html#fromInputResource[A](implicitevidence$3:kantan.codecs.resource.InputResource[A],implicitparser:kantan.xpath.XmlParser):kantan.xpath.XmlSource[A]", "kind" : "implicit def"}, {"label" : "inputSource", "tail" : "(parser: XmlParser): XmlSource[InputSource]", "member" : "kantan.xpath.XmlSource.inputSource", "link" : "kantan\/xpath\/XmlSource$.html#inputSource(implicitparser:kantan.xpath.XmlParser):kantan.xpath.XmlSource[kantan.xpath.InputSource]", "kind" : "implicit def"}, {"label" : "node", "tail" : ": XmlSource[Node]", "member" : "kantan.xpath.XmlSource.node", "link" : "kantan\/xpath\/XmlSource$.html#node:kantan.xpath.XmlSource[kantan.xpath.Node]", "kind" : "implicit val"}, {"label" : "from", "tail" : "(f: (A) => ParseResult[Node]): XmlSource[A]", "member" : "kantan.xpath.XmlSource.from", "link" : "kantan\/xpath\/XmlSource$.html#from[A](f:A=>kantan.xpath.ParseResult[kantan.xpath.Node]):kantan.xpath.XmlSource[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: XmlSource[A]): XmlSource[A]", "member" : "kantan.xpath.XmlSource.apply", "link" : "kantan\/xpath\/XmlSource$.html#apply[A](implicitev:kantan.xpath.XmlSource[A]):kantan.xpath.XmlSource[A]", "kind" : "macro def"}, {"label" : "fromReaderResource", "tail" : "(arg0: ReaderResource[A], parser: XmlParser): XmlSource[A]", "member" : "kantan.xpath.LowPriorityXmlSourceInstances.fromReaderResource", "link" : "kantan\/xpath\/XmlSource$.html#fromReaderResource[A](implicitevidence$4:kantan.codecs.resource.ReaderResource[A],implicitparser:kantan.xpath.XmlParser):kantan.xpath.XmlSource[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/XmlSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/XmlSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/XmlSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/XmlSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/XmlSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/XmlSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/XmlSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/XmlSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/XmlSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/XmlSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/XmlSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/XmlSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/XmlSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/XmlSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/XmlSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/XmlSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/xpath\/XmlSource.html", "kind" : "trait", "members_trait" : [{"label" : "contramapResult", "tail" : "(f: (B) => ParseResult[AA]): XmlSource[B]", "member" : "kantan.xpath.XmlSource.contramapResult", "link" : "kantan\/xpath\/XmlSource.html#contramapResult[AA<:A,B](f:B=>kantan.xpath.ParseResult[AA]):kantan.xpath.XmlSource[B]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (B) => A): XmlSource[B]", "member" : "kantan.xpath.XmlSource.contramap", "link" : "kantan\/xpath\/XmlSource.html#contramap[B](f:B=>A):kantan.xpath.XmlSource[B]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: A, expr: Query[DecodeResult[B]]): ReadResult[B]", "member" : "kantan.xpath.XmlSource.eval", "link" : "kantan\/xpath\/XmlSource.html#eval[B](a:A,expr:kantan.xpath.Query[kantan.xpath.DecodeResult[B]]):kantan.xpath.ReadResult[B]", "kind" : "def"}, {"label" : "unsafeEval", "tail" : "(a: A, expr: Query[DecodeResult[B]]): B", "member" : "kantan.xpath.XmlSource.unsafeEval", "link" : "kantan\/xpath\/XmlSource.html#unsafeEval[B](a:A,expr:kantan.xpath.Query[kantan.xpath.DecodeResult[B]]):B", "kind" : "def"}, {"label" : "eval", "tail" : "(a: A, expr: XPathExpression)(arg0: Compiler[B]): XPathResult[B]", "member" : "kantan.xpath.XmlSource.eval", "link" : "kantan\/xpath\/XmlSource.html#eval[B](a:A,expr:kantan.xpath.XPathExpression)(implicitevidence$2:kantan.xpath.Compiler[B]):kantan.xpath.XPathResult[B]", "kind" : "def"}, {"label" : "unsafeEval", "tail" : "(a: A, expr: XPathExpression)(arg0: Compiler[B]): B", "member" : "kantan.xpath.XmlSource.unsafeEval", "link" : "kantan\/xpath\/XmlSource.html#unsafeEval[B](a:A,expr:kantan.xpath.XPathExpression)(implicitevidence$1:kantan.xpath.Compiler[B]):B", "kind" : "def"}, {"label" : "asUnsafeNode", "tail" : "(a: A): Node", "member" : "kantan.xpath.XmlSource.asUnsafeNode", "link" : "kantan\/xpath\/XmlSource.html#asUnsafeNode(a:A):kantan.xpath.Node", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/XmlSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/XmlSource.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/XmlSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/XmlSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/XmlSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/XmlSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/XmlSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XmlSource.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/XmlSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/XmlSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/XmlSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/XmlSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/XmlSource.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/XmlSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/XmlSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/XmlSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/XmlSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "asNode", "tail" : "(a: A): ParseResult[Node]", "member" : "kantan.xpath.XmlSource.asNode", "link" : "kantan\/xpath\/XmlSource.html#asNode(a:A):kantan.xpath.ParseResult[kantan.xpath.Node]", "kind" : "abstract def"}], "shortDescription" : "Type class for turning instances of A into valid instances of Node."}, {"name" : "kantan.xpath.XPathCompiler", "object" : "kantan\/xpath\/XPathCompiler$.html", "members_object" : [{"label" : "builtIn", "tail" : ": XPathCompiler", "member" : "kantan.xpath.XPathCompiler.builtIn", "link" : "kantan\/xpath\/XPathCompiler$.html#builtIn:kantan.xpath.XPathCompiler", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(f: (String) => CompileResult[XPathExpression]): XPathCompiler", "member" : "kantan.xpath.XPathCompiler.apply", "link" : "kantan\/xpath\/XPathCompiler$.html#apply(f:String=>kantan.xpath.CompileResult[kantan.xpath.XPathExpression]):kantan.xpath.XPathCompiler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/XPathCompiler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/XPathCompiler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/XPathCompiler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/XPathCompiler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/XPathCompiler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/XPathCompiler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/XPathCompiler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathCompiler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathCompiler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathCompiler$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/XPathCompiler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/XPathCompiler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/XPathCompiler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/XPathCompiler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/XPathCompiler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/XPathCompiler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/XPathCompiler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/XPathCompiler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/XPathCompiler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/xpath\/XPathCompiler.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/XPathCompiler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/XPathCompiler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/XPathCompiler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/XPathCompiler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/XPathCompiler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/XPathCompiler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/XPathCompiler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathCompiler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathCompiler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathCompiler.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/XPathCompiler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/XPathCompiler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/XPathCompiler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/XPathCompiler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/XPathCompiler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/XPathCompiler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/XPathCompiler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/XPathCompiler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/XPathCompiler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compile", "tail" : "(str: String): CompileResult[XPathExpression]", "member" : "kantan.xpath.XPathCompiler.compile", "link" : "kantan\/xpath\/XPathCompiler.html#compile(str:String):kantan.xpath.CompileResult[kantan.xpath.XPathExpression]", "kind" : "abstract def"}], "shortDescription" : "Compiles XPath expressions."}, {"name" : "kantan.xpath.XPathError", "shortDescription" : "Describes an error that can occur while dealing with XPath.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/xpath\/XPathError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/XPathError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/xpath\/XPathError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/xpath\/XPathError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/xpath\/XPathError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/xpath\/XPathError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/xpath\/XPathError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/xpath\/XPathError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/xpath\/XPathError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/xpath\/XPathError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/XPathError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/XPathError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/xpath\/XPathError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/xpath\/XPathError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/xpath\/XPathError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/xpath\/XPathError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/xpath\/XPathError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/XPathError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/XPathError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/XPathError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/XPathError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/XPathError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/XPathError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/XPathError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathError.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/XPathError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/XPathError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/XPathError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/XPathError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/XPathError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/XPathError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/XPathError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/XPathError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/xpath\/XPathError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/xpath\/XPathError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/xpath\/XPathError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "class" : "kantan\/xpath\/XPathError.html", "kind" : "class"}, {"name" : "kantan.xpath.XPathResult", "shortDescription" : "", "object" : "kantan\/xpath\/XPathResult$.html", "members_object" : [{"label" : "failure", "tail" : "(f: XPathError): Either[XPathError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/xpath\/XPathResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[XPathError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/xpath\/XPathResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[XPathError, S]])(bf: BuildFrom[M[Either[XPathError, S]], S, M[S]]): Either[XPathError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/xpath\/XPathResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/XPathResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/XPathResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/XPathResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/XPathResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/XPathResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/XPathResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/XPathResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/XPathResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/XPathResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/XPathResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/XPathResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/XPathResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/XPathResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/XPathResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/XPathResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/XPathResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/XPathResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/xpath\/package$$XPathResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/xpath\/package$$XPathResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/xpath\/package$$XPathResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/xpath\/package$$XPathResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/xpath\/package$$XPathResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/xpath\/package$$XPathResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/xpath\/package$$XPathResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/xpath\/package$$XPathResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/xpath\/package$$XPathResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/xpath\/package$$XPathResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/xpath\/package$$XPathResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/xpath\/package$$XPathResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/xpath\/package$$XPathResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/xpath\/package$$XPathResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/xpath\/package$$XPathResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/xpath\/package$$XPathResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/xpath\/package$$XPathResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/xpath\/package$$XPathResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/xpath\/package$$XPathResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/xpath\/package$$XPathResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/xpath\/package$$XPathResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/xpath\/package$$XPathResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/xpath\/package$$XPathResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/package$$XPathResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/package$$XPathResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/package$$XPathResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/package$$XPathResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/package$$XPathResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/package$$XPathResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/package$$XPathResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$XPathResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$XPathResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/package$$XPathResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/package$$XPathResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/package$$XPathResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/package$$XPathResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/package$$XPathResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/package$$XPathResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/package$$XPathResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/package$$XPathResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/package$$XPathResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/package$$XPathResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/xpath\/package$$XPathResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/xpath\/package$$XPathResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/xpath\/package$$XPathResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/xpath\/package$$XPathResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/xpath\/package$$XPathResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/xpath\/package$$XPathResult.html"}], "kantan.xpath.laws.discipline" : [{"name" : "kantan.xpath.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "arbXmlSource", "tail" : "(arg0: Cogen[A], n: Arbitrary[Node]): Arbitrary[XmlSource[A]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbXmlSource", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbXmlSource[A](implicitevidence$3:org.scalacheck.Cogen[A],implicitn:org.scalacheck.Arbitrary[kantan.xpath.Node]):org.scalacheck.Arbitrary[kantan.xpath.XmlSource[A]]", "kind" : "implicit def"}, {"label" : "arbQuery", "tail" : "(arg0: Arbitrary[A]): Arbitrary[Query[A]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbQuery", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbQuery[A](implicitevidence$2:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.xpath.Query[A]]", "kind" : "implicit def"}, {"label" : "cogenNode", "tail" : ": Cogen[Node]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenNode", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenNode:org.scalacheck.Cogen[kantan.xpath.Node]", "kind" : "implicit val"}, {"label" : "arbNode", "tail" : "(f: (A) => String)(arg0: Arbitrary[A]): Arbitrary[Node]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbNode", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbNode[A](f:A=>String)(implicitevidence$1:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.xpath.Node]", "kind" : "def"}, {"label" : "arbIllegalNodeOpt", "tail" : "(la: Arbitrary[IllegalString[A]]): Arbitrary[IllegalNode[Option[A]]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbIllegalNodeOpt", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalNodeOpt[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[Option[A]]]", "kind" : "implicit def"}, {"label" : "arbLegalNodeOpt", "tail" : "(la: Arbitrary[LegalString[A]]): Arbitrary[LegalNode[Option[A]]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbLegalNodeOpt", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalNodeOpt[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[Option[A]]]", "kind" : "implicit def"}, {"label" : "arbIllegalNode", "tail" : "(ia: Arbitrary[IllegalValue[Node, A, codecs.type]]): Arbitrary[IllegalNode[A]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbIllegalNode", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalNode[A](implicitia:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[kantan.xpath.Node,A,kantan.xpath.codecs.type]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[A]]", "kind" : "implicit def"}, {"label" : "arbIllegalFoundNode", "tail" : "(ia: Arbitrary[IllegalString[A]]): Arbitrary[IllegalValue[Node, A, codecs.type]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbIllegalFoundNode", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalFoundNode[A](implicitia:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[kantan.xpath.Node,A,kantan.xpath.codecs.type]]", "kind" : "implicit def"}, {"label" : "arbLegalNode", "tail" : "(la: Arbitrary[LegalValue[Node, A, codecs.type]]): Arbitrary[LegalNode[A]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbLegalNode", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalNode[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[kantan.xpath.Node,A,kantan.xpath.codecs.type]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[A]]", "kind" : "implicit def"}, {"label" : "arbLegalFoundNode", "tail" : "(la: Arbitrary[LegalString[A]]): Arbitrary[LegalValue[Node, A, codecs.type]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbLegalFoundNode", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalFoundNode[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[kantan.xpath.Node,A,kantan.xpath.codecs.type]]", "kind" : "implicit def"}, {"label" : "arbIllegalXml", "tail" : ": Arbitrary[IllegalValue[String, Node, codecs.type]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbIllegalXml", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalXml:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,kantan.xpath.Node,kantan.xpath.codecs.type]]", "kind" : "implicit val"}, {"label" : "arbLegalXml", "tail" : ": Arbitrary[LegalValue[String, Node, codecs.type]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbLegalXml", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalXml:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[String,kantan.xpath.Node,kantan.xpath.codecs.type]]", "kind" : "implicit val"}, {"label" : "cogenXPathError", "tail" : ": Cogen[XPathError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenXPathError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenXPathError:org.scalacheck.Cogen[kantan.xpath.XPathError]", "kind" : "implicit val"}, {"label" : "cogenReadError", "tail" : ": Cogen[ReadError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenReadError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenReadError:org.scalacheck.Cogen[kantan.xpath.ReadError]", "kind" : "implicit val"}, {"label" : "cogenParseError", "tail" : ": Cogen[ParseError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenParseError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenParseError:org.scalacheck.Cogen[kantan.xpath.ParseError]", "kind" : "implicit val"}, {"label" : "cogenIOError", "tail" : ": Cogen[IOError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenIOError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenIOError:org.scalacheck.Cogen[kantan.xpath.ParseError.IOError]", "kind" : "implicit val"}, {"label" : "cogenSyntaxError", "tail" : ": Cogen[SyntaxError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenSyntaxError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenSyntaxError:org.scalacheck.Cogen[kantan.xpath.ParseError.SyntaxError]", "kind" : "implicit val"}, {"label" : "cogenDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenDecodeError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenDecodeError:org.scalacheck.Cogen[kantan.xpath.DecodeError]", "kind" : "implicit val"}, {"label" : "cogenNotFound", "tail" : ": Cogen[NotFound.type]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenNotFound", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenNotFound:org.scalacheck.Cogen[kantan.xpath.DecodeError.NotFound.type]", "kind" : "implicit val"}, {"label" : "cogenTypeError", "tail" : ": Cogen[TypeError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenTypeError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenTypeError:org.scalacheck.Cogen[kantan.xpath.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "cogenCompileError", "tail" : ": Cogen[CompileError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenCompileError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenCompileError:org.scalacheck.Cogen[kantan.xpath.CompileError]", "kind" : "implicit val"}, {"label" : "arbXPathError", "tail" : ": Arbitrary[XPathError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbXPathError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbXPathError:org.scalacheck.Arbitrary[kantan.xpath.XPathError]", "kind" : "implicit val"}, {"label" : "arbReadError", "tail" : ": Arbitrary[ReadError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbReadError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbReadError:org.scalacheck.Arbitrary[kantan.xpath.ReadError]", "kind" : "implicit val"}, {"label" : "arbParseError", "tail" : ": Arbitrary[ParseError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbParseError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbParseError:org.scalacheck.Arbitrary[kantan.xpath.ParseError]", "kind" : "implicit val"}, {"label" : "arbIOError", "tail" : ": Arbitrary[IOError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbIOError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIOError:org.scalacheck.Arbitrary[kantan.xpath.ParseError.IOError]", "kind" : "implicit val"}, {"label" : "arbSyntaxError", "tail" : ": Arbitrary[SyntaxError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbSyntaxError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbSyntaxError:org.scalacheck.Arbitrary[kantan.xpath.ParseError.SyntaxError]", "kind" : "implicit val"}, {"label" : "arbDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbDecodeError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbDecodeError:org.scalacheck.Arbitrary[kantan.xpath.DecodeError]", "kind" : "implicit val"}, {"label" : "arbNotFound", "tail" : ": Arbitrary[NotFound.type]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbNotFound", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbNotFound:org.scalacheck.Arbitrary[kantan.xpath.DecodeError.NotFound.type]", "kind" : "implicit val"}, {"label" : "arbTypeError", "tail" : ": Arbitrary[TypeError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbTypeError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbTypeError:org.scalacheck.Arbitrary[kantan.xpath.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "arbCompileError", "tail" : ": Arbitrary[CompileError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbCompileError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbCompileError:org.scalacheck.Arbitrary[kantan.xpath.CompileError]", "kind" : "implicit val"}, {"label" : "arbIllegalTuple22", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]], a20: Arbitrary[IllegalString[A20]], a21: Arbitrary[IllegalString[A21]], a22: Arbitrary[IllegalString[A22]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple22", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A21]],implicita22:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A22]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple22", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]], a20: Arbitrary[LegalString[A20]], a21: Arbitrary[LegalString[A21]], a22: Arbitrary[LegalString[A22]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple22", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A21]],implicita22:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A22]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple21", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]], a20: Arbitrary[IllegalString[A20]], a21: Arbitrary[IllegalString[A21]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple21", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A21]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple21", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]], a20: Arbitrary[LegalString[A20]], a21: Arbitrary[LegalString[A21]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple21", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A21]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple20", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]], a20: Arbitrary[IllegalString[A20]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple20", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A20]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple20", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]], a20: Arbitrary[LegalString[A20]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple20", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A20]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple19", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple19", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple19", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple19", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple18", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple18", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple18", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple18", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple17", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple17", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple17", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple17", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple16", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple16", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple16", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple16", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple15", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple15", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple15", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple15", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple14", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple14", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple14", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple14", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple13", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple13", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple13", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple13", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple12", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple12", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple12", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple12", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple11", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple11", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple11", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple11", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple10", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple10", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple10", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple10", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple9", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple9", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple9[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple9", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple9", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple9[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple8", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple8", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple8[A1,A2,A3,A4,A5,A6,A7,A8](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple8", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple8", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple8[A1,A2,A3,A4,A5,A6,A7,A8](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple7", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple7", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple7[A1,A2,A3,A4,A5,A6,A7](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple7", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple7", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple7[A1,A2,A3,A4,A5,A6,A7](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple6", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple6", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple6[A1,A2,A3,A4,A5,A6](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple6", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple6", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple6[A1,A2,A3,A4,A5,A6](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple5", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple5", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple5[A1,A2,A3,A4,A5](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple5", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple5", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple5[A1,A2,A3,A4,A5](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple4", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]]): Arbitrary[IllegalNode[(A1, A2, A3, A4)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple4", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple4[A1,A2,A3,A4](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple4", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]]): Arbitrary[LegalNode[(A1, A2, A3, A4)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple4", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple4[A1,A2,A3,A4](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple3", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]]): Arbitrary[IllegalNode[(A1, A2, A3)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple3", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple3[A1,A2,A3](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple3", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]]): Arbitrary[LegalNode[(A1, A2, A3)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple3", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple3[A1,A2,A3](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple2", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]]): Arbitrary[IllegalNode[(A1, A2)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple2", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple2[A1,A2](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple2", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]]): Arbitrary[LegalNode[(A1, A2)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple2", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple2[A1,A2](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple1", "tail" : "(a1: Arbitrary[IllegalString[A1]]): Arbitrary[IllegalNode[(A1)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple1", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalTuple1[A1](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple1", "tail" : "(a1: Arbitrary[LegalString[A1]]): Arbitrary[LegalNode[(A1)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple1", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalTuple1[A1](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,)]]", "kind" : "implicit def"}, {"label" : "asTextAttributes", "tail" : "(atts: String*): Element", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.asTextAttributes", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#asTextAttributes(atts:String*):kantan.xpath.Element", "kind" : "def"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$7:org.scalacheck.Arbitrary[E],implicitevidence$8:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Cogen[E], arg1: Arbitrary[D], arg2: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Cogen[E],implicitevidence$5:org.scalacheck.Arbitrary[D],implicitevidence$6:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.xpath.laws.discipline.ArbitraryArities", "trait" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html", "kind" : "trait", "members_trait" : [{"label" : "arbIllegalTuple22", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]], a20: Arbitrary[IllegalString[A20]], a21: Arbitrary[IllegalString[A21]], a22: Arbitrary[IllegalString[A22]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple22", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A21]],implicita22:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A22]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple22", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]], a20: Arbitrary[LegalString[A20]], a21: Arbitrary[LegalString[A21]], a22: Arbitrary[LegalString[A22]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple22", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A21]],implicita22:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A22]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple21", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]], a20: Arbitrary[IllegalString[A20]], a21: Arbitrary[IllegalString[A21]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple21", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A21]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple21", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]], a20: Arbitrary[LegalString[A20]], a21: Arbitrary[LegalString[A21]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple21", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A21]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple20", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]], a20: Arbitrary[IllegalString[A20]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple20", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A20]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple20", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]], a20: Arbitrary[LegalString[A20]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple20", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A20]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple19", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple19", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple19", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple19", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple18", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple18", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple18", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple18", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple17", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple17", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple17", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple17", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple16", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple16", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple16", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple16", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple15", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple15", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple15", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple15", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple14", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple14", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple14", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple14", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple13", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple13", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple13", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple13", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple12", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple12", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple12", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple12", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple11", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple11", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple11", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple11", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple10", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple10", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple10", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple10", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple9", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple9", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple9[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple9", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple9", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple9[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple8", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple8", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple8[A1,A2,A3,A4,A5,A6,A7,A8](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple8", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple8", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple8[A1,A2,A3,A4,A5,A6,A7,A8](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple7", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple7", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple7[A1,A2,A3,A4,A5,A6,A7](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple7", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple7", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple7[A1,A2,A3,A4,A5,A6,A7](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple6", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple6", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple6[A1,A2,A3,A4,A5,A6](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple6", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple6", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple6[A1,A2,A3,A4,A5,A6](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple5", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple5", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple5[A1,A2,A3,A4,A5](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple5", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple5", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple5[A1,A2,A3,A4,A5](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple4", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]]): Arbitrary[IllegalNode[(A1, A2, A3, A4)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple4", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple4[A1,A2,A3,A4](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple4", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]]): Arbitrary[LegalNode[(A1, A2, A3, A4)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple4", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple4[A1,A2,A3,A4](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple3", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]]): Arbitrary[IllegalNode[(A1, A2, A3)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple3", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple3[A1,A2,A3](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple3", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]]): Arbitrary[LegalNode[(A1, A2, A3)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple3", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple3[A1,A2,A3](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple2", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]]): Arbitrary[IllegalNode[(A1, A2)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple2", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple2[A1,A2](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple2", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]]): Arbitrary[LegalNode[(A1, A2)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple2", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple2[A1,A2](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple1", "tail" : "(a1: Arbitrary[IllegalString[A1]]): Arbitrary[IllegalNode[(A1)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple1", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple1[A1](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple1", "tail" : "(a1: Arbitrary[LegalString[A1]]): Arbitrary[LegalNode[(A1)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple1", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple1[A1](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,)]]", "kind" : "implicit def"}, {"label" : "asTextAttributes", "tail" : "(atts: String*): Element", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.asTextAttributes", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#asTextAttributes(atts:String*):kantan.xpath.Element", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryArities.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.xpath.laws.discipline.ArbitraryInstances", "trait" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "arbXmlSource", "tail" : "(arg0: Cogen[A], n: Arbitrary[Node]): Arbitrary[XmlSource[A]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbXmlSource", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbXmlSource[A](implicitevidence$3:org.scalacheck.Cogen[A],implicitn:org.scalacheck.Arbitrary[kantan.xpath.Node]):org.scalacheck.Arbitrary[kantan.xpath.XmlSource[A]]", "kind" : "implicit def"}, {"label" : "arbQuery", "tail" : "(arg0: Arbitrary[A]): Arbitrary[Query[A]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbQuery", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbQuery[A](implicitevidence$2:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.xpath.Query[A]]", "kind" : "implicit def"}, {"label" : "cogenNode", "tail" : ": Cogen[Node]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenNode", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenNode:org.scalacheck.Cogen[kantan.xpath.Node]", "kind" : "implicit val"}, {"label" : "arbNode", "tail" : "(f: (A) => String)(arg0: Arbitrary[A]): Arbitrary[Node]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbNode", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbNode[A](f:A=>String)(implicitevidence$1:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.xpath.Node]", "kind" : "def"}, {"label" : "arbIllegalNodeOpt", "tail" : "(la: Arbitrary[IllegalString[A]]): Arbitrary[IllegalNode[Option[A]]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbIllegalNodeOpt", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalNodeOpt[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[Option[A]]]", "kind" : "implicit def"}, {"label" : "arbLegalNodeOpt", "tail" : "(la: Arbitrary[LegalString[A]]): Arbitrary[LegalNode[Option[A]]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbLegalNodeOpt", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalNodeOpt[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[Option[A]]]", "kind" : "implicit def"}, {"label" : "arbIllegalNode", "tail" : "(ia: Arbitrary[IllegalValue[Node, A, codecs.type]]): Arbitrary[IllegalNode[A]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbIllegalNode", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalNode[A](implicitia:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[kantan.xpath.Node,A,kantan.xpath.codecs.type]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[A]]", "kind" : "implicit def"}, {"label" : "arbIllegalFoundNode", "tail" : "(ia: Arbitrary[IllegalString[A]]): Arbitrary[IllegalValue[Node, A, codecs.type]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbIllegalFoundNode", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalFoundNode[A](implicitia:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[kantan.xpath.Node,A,kantan.xpath.codecs.type]]", "kind" : "implicit def"}, {"label" : "arbLegalNode", "tail" : "(la: Arbitrary[LegalValue[Node, A, codecs.type]]): Arbitrary[LegalNode[A]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbLegalNode", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalNode[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[kantan.xpath.Node,A,kantan.xpath.codecs.type]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[A]]", "kind" : "implicit def"}, {"label" : "arbLegalFoundNode", "tail" : "(la: Arbitrary[LegalString[A]]): Arbitrary[LegalValue[Node, A, codecs.type]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbLegalFoundNode", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalFoundNode[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[kantan.xpath.Node,A,kantan.xpath.codecs.type]]", "kind" : "implicit def"}, {"label" : "arbIllegalXml", "tail" : ": Arbitrary[IllegalValue[String, Node, codecs.type]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbIllegalXml", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalXml:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,kantan.xpath.Node,kantan.xpath.codecs.type]]", "kind" : "implicit val"}, {"label" : "arbLegalXml", "tail" : ": Arbitrary[LegalValue[String, Node, codecs.type]]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbLegalXml", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalXml:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[String,kantan.xpath.Node,kantan.xpath.codecs.type]]", "kind" : "implicit val"}, {"label" : "cogenXPathError", "tail" : ": Cogen[XPathError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenXPathError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenXPathError:org.scalacheck.Cogen[kantan.xpath.XPathError]", "kind" : "implicit val"}, {"label" : "cogenReadError", "tail" : ": Cogen[ReadError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenReadError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenReadError:org.scalacheck.Cogen[kantan.xpath.ReadError]", "kind" : "implicit val"}, {"label" : "cogenParseError", "tail" : ": Cogen[ParseError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenParseError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenParseError:org.scalacheck.Cogen[kantan.xpath.ParseError]", "kind" : "implicit val"}, {"label" : "cogenIOError", "tail" : ": Cogen[IOError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenIOError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenIOError:org.scalacheck.Cogen[kantan.xpath.ParseError.IOError]", "kind" : "implicit val"}, {"label" : "cogenSyntaxError", "tail" : ": Cogen[SyntaxError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenSyntaxError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenSyntaxError:org.scalacheck.Cogen[kantan.xpath.ParseError.SyntaxError]", "kind" : "implicit val"}, {"label" : "cogenDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenDecodeError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenDecodeError:org.scalacheck.Cogen[kantan.xpath.DecodeError]", "kind" : "implicit val"}, {"label" : "cogenNotFound", "tail" : ": Cogen[NotFound.type]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenNotFound", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenNotFound:org.scalacheck.Cogen[kantan.xpath.DecodeError.NotFound.type]", "kind" : "implicit val"}, {"label" : "cogenTypeError", "tail" : ": Cogen[TypeError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenTypeError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenTypeError:org.scalacheck.Cogen[kantan.xpath.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "cogenCompileError", "tail" : ": Cogen[CompileError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.cogenCompileError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenCompileError:org.scalacheck.Cogen[kantan.xpath.CompileError]", "kind" : "implicit val"}, {"label" : "arbXPathError", "tail" : ": Arbitrary[XPathError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbXPathError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbXPathError:org.scalacheck.Arbitrary[kantan.xpath.XPathError]", "kind" : "implicit val"}, {"label" : "arbReadError", "tail" : ": Arbitrary[ReadError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbReadError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbReadError:org.scalacheck.Arbitrary[kantan.xpath.ReadError]", "kind" : "implicit val"}, {"label" : "arbParseError", "tail" : ": Arbitrary[ParseError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbParseError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbParseError:org.scalacheck.Arbitrary[kantan.xpath.ParseError]", "kind" : "implicit val"}, {"label" : "arbIOError", "tail" : ": Arbitrary[IOError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbIOError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIOError:org.scalacheck.Arbitrary[kantan.xpath.ParseError.IOError]", "kind" : "implicit val"}, {"label" : "arbSyntaxError", "tail" : ": Arbitrary[SyntaxError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbSyntaxError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbSyntaxError:org.scalacheck.Arbitrary[kantan.xpath.ParseError.SyntaxError]", "kind" : "implicit val"}, {"label" : "arbDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbDecodeError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbDecodeError:org.scalacheck.Arbitrary[kantan.xpath.DecodeError]", "kind" : "implicit val"}, {"label" : "arbNotFound", "tail" : ": Arbitrary[NotFound.type]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbNotFound", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbNotFound:org.scalacheck.Arbitrary[kantan.xpath.DecodeError.NotFound.type]", "kind" : "implicit val"}, {"label" : "arbTypeError", "tail" : ": Arbitrary[TypeError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbTypeError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbTypeError:org.scalacheck.Arbitrary[kantan.xpath.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "arbCompileError", "tail" : ": Arbitrary[CompileError]", "member" : "kantan.xpath.laws.discipline.ArbitraryInstances.arbCompileError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbCompileError:org.scalacheck.Arbitrary[kantan.xpath.CompileError]", "kind" : "implicit val"}, {"label" : "arbIllegalTuple22", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]], a20: Arbitrary[IllegalString[A20]], a21: Arbitrary[IllegalString[A21]], a22: Arbitrary[IllegalString[A22]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple22", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A21]],implicita22:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A22]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple22", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]], a20: Arbitrary[LegalString[A20]], a21: Arbitrary[LegalString[A21]], a22: Arbitrary[LegalString[A22]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple22", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A21]],implicita22:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A22]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple21", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]], a20: Arbitrary[IllegalString[A20]], a21: Arbitrary[IllegalString[A21]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple21", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A21]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple21", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]], a20: Arbitrary[LegalString[A20]], a21: Arbitrary[LegalString[A21]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple21", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A20]],implicita21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A21]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple20", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]], a20: Arbitrary[IllegalString[A20]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple20", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A20]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple20", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]], a20: Arbitrary[LegalString[A20]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple20", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]],implicita20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A20]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple19", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]], a19: Arbitrary[IllegalString[A19]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple19", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A19]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple19", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]], a19: Arbitrary[LegalString[A19]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple19", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]],implicita19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A19]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple18", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]], a18: Arbitrary[IllegalString[A18]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple18", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A18]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple18", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]], a18: Arbitrary[LegalString[A18]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple18", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]],implicita18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A18]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple17", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]], a17: Arbitrary[IllegalString[A17]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple17", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A17]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple17", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]], a17: Arbitrary[LegalString[A17]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple17", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]],implicita17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A17]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple16", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]], a16: Arbitrary[IllegalString[A16]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple16", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A16]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple16", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]], a16: Arbitrary[LegalString[A16]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple16", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]],implicita16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A16]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple15", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]], a15: Arbitrary[IllegalString[A15]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple15", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A15]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple15", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]], a15: Arbitrary[LegalString[A15]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple15", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]],implicita15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A15]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple14", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]], a14: Arbitrary[IllegalString[A14]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple14", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A14]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple14", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]], a14: Arbitrary[LegalString[A14]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple14", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]],implicita14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A14]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple13", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]], a13: Arbitrary[IllegalString[A13]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple13", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A13]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple13", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]], a13: Arbitrary[LegalString[A13]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple13", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]],implicita13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A13]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple12", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]], a12: Arbitrary[IllegalString[A12]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple12", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A12]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple12", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]], a12: Arbitrary[LegalString[A12]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple12", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]],implicita12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A12]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple11", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]], a11: Arbitrary[IllegalString[A11]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple11", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A11]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple11", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]], a11: Arbitrary[LegalString[A11]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple11", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]],implicita11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A11]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple10", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]], a10: Arbitrary[IllegalString[A10]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple10", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A10]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple10", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]], a10: Arbitrary[LegalString[A10]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple10", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]],implicita10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A10]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple9", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]], a9: Arbitrary[IllegalString[A9]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple9", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple9[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A9]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple9", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]], a9: Arbitrary[LegalString[A9]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple9", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple9[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]],implicita9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A9]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple8", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]], a8: Arbitrary[IllegalString[A8]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7, A8)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple8", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple8[A1,A2,A3,A4,A5,A6,A7,A8](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A8]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7,A8)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple8", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]], a8: Arbitrary[LegalString[A8]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7, A8)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple8", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple8[A1,A2,A3,A4,A5,A6,A7,A8](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]],implicita8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A8]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7,A8)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple7", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]], a7: Arbitrary[IllegalString[A7]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6, A7)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple7", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple7[A1,A2,A3,A4,A5,A6,A7](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A7]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6,A7)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple7", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]], a7: Arbitrary[LegalString[A7]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6, A7)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple7", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple7[A1,A2,A3,A4,A5,A6,A7](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]],implicita7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A7]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6,A7)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple6", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]], a6: Arbitrary[IllegalString[A6]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5, A6)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple6", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple6[A1,A2,A3,A4,A5,A6](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A6]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5,A6)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple6", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]], a6: Arbitrary[LegalString[A6]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5, A6)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple6", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple6[A1,A2,A3,A4,A5,A6](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]],implicita6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A6]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5,A6)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple5", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]], a5: Arbitrary[IllegalString[A5]]): Arbitrary[IllegalNode[(A1, A2, A3, A4, A5)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple5", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple5[A1,A2,A3,A4,A5](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A5]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4,A5)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple5", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]], a5: Arbitrary[LegalString[A5]]): Arbitrary[LegalNode[(A1, A2, A3, A4, A5)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple5", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple5[A1,A2,A3,A4,A5](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]],implicita5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A5]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4,A5)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple4", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]], a4: Arbitrary[IllegalString[A4]]): Arbitrary[IllegalNode[(A1, A2, A3, A4)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple4", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple4[A1,A2,A3,A4](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A4]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3,A4)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple4", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]], a4: Arbitrary[LegalString[A4]]): Arbitrary[LegalNode[(A1, A2, A3, A4)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple4", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple4[A1,A2,A3,A4](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]],implicita4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A4]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3,A4)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple3", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]], a3: Arbitrary[IllegalString[A3]]): Arbitrary[IllegalNode[(A1, A2, A3)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple3", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple3[A1,A2,A3](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A3]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2,A3)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple3", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]], a3: Arbitrary[LegalString[A3]]): Arbitrary[LegalNode[(A1, A2, A3)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple3", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple3[A1,A2,A3](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]],implicita3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A3]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2,A3)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple2", "tail" : "(a1: Arbitrary[IllegalString[A1]], a2: Arbitrary[IllegalString[A2]]): Arbitrary[IllegalNode[(A1, A2)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple2", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple2[A1,A2](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A2]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,A2)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple2", "tail" : "(a1: Arbitrary[LegalString[A1]], a2: Arbitrary[LegalString[A2]]): Arbitrary[LegalNode[(A1, A2)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple2", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple2[A1,A2](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]],implicita2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A2]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,A2)]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple1", "tail" : "(a1: Arbitrary[IllegalString[A1]]): Arbitrary[IllegalNode[(A1)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbIllegalTuple1", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple1[A1](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A1]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.IllegalNode[(A1,)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple1", "tail" : "(a1: Arbitrary[LegalString[A1]]): Arbitrary[LegalNode[(A1)]]", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.arbLegalTuple1", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple1[A1](implicita1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A1]]):org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[(A1,)]]", "kind" : "implicit def"}, {"label" : "asTextAttributes", "tail" : "(atts: String*): Element", "member" : "kantan.xpath.laws.discipline.ArbitraryArities.asTextAttributes", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#asTextAttributes(atts:String*):kantan.xpath.Element", "kind" : "def"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbEncoder[E,D,T](implicitevidence$7:org.scalacheck.Arbitrary[E],implicitevidence$8:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Cogen[E], arg1: Arbitrary[D], arg2: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Cogen[E],implicitevidence$5:org.scalacheck.Arbitrary[D],implicitevidence$6:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.xpath.laws.discipline.NodeDecoderTests", "shortDescription" : "", "object" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: NodeDecoderLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalNode[A]]): NodeDecoderTests[A]", "member" : "kantan.xpath.laws.discipline.NodeDecoderTests.apply", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#apply[A](implicitevidence$1:kantan.xpath.laws.discipline.NodeDecoderLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.xpath.laws.discipline.LegalNode[A]]):kantan.xpath.laws.discipline.NodeDecoderTests[A]", "kind" : "def"}, {"label" : "arb", "tail" : ": Arbitrary[Node]", "member" : "kantan.xpath.laws.discipline.NodeDecoderTests.arb", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#arb:org.scalacheck.Arbitrary[kantan.xpath.Node]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/xpath\/laws\/discipline\/NodeDecoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};